(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Desktop = void 0;
const File_1 = require("./File");
const View_1 = require("./View");

const Icon_1 = require("./Icon");
const Screen_1 = require("./Screen");
class Desktop {
    constructor() {
        this.files = {
            '01bcr': new File_1.TextFile('01bcr', Buffer("","base64")),
            '02bcr': new File_1.TextFile('02bcr', Buffer("TWFyaWx5biBhIGZhaXQgYXBwZWwg4CBtb2kgaWwgeSBhIHByZXNxdWUgdW4gYW4gZOlq4C4gRWxsZSBhdmFpdCBiZXNvaW4gZGVzIHNlcnZpY2VzIGQndW4gZOl0ZWN0aXZlLiBTb24gbWFyaSwgQmFyeSBUb3JyYW5jZSwgYXZhaXQgZGlzcGFydS4gDQpMb3JzIGQndW4gcHJlbWllciDpY2hhbmdlIHTpbOlwaG9uaXF1ZSwgZWxsZSBtJ2Egcul26WzpIHF1ZSBCYXJ5IFRvcnJhbmNlIHNlIG5vbW1haXQgZW4gculhbGl06SBCYXJ5IENsdWtzdGVpbi4gRWxsZSBtJ2EgZXhwbGlxdekgYXZvaXIgZOlt6W5hZ+kgYXZlYyBsdWkg4CBIYXdhaSBlbiAxOTY5LiANCkTocyBub3RyZSBwcmVtaehyZSBjb252ZXJzYXRpb24sIGonYWkgc2VudGkgcXUnZWxsZSDpdGFpdCBpbmNyb3lhYmxlbWVudCBuZXJ2ZXVzZS4gRWxsZSBtJ2EgY29uZmlybekgcXUnZWxsZSBzZSBzZW50YWl0IGVuIGRhbmdlci4gSidhdmFpcyBk6WrgIGV1IGRlcyBjYXMgY29tcGxpcXXpcyBkZSBkaXZvcmNlLiBEaXNwYXJpdGlvbnMsIG1lbnNvbmdlcywgbWVuYWNlcyA6IHRvdXQgZXN0IGJvbiBwb3VyIGVzc2F5ZXIgZCfpY2hhcHBlciDgIHNlcyBvYmxpZ2F0aW9ucy4gSmUgbHVpIGFpIGRvbmMgZGl0IHF1ZSBqJ2F2YWlzIGwnaGFiaXR1ZGUgZGUgY2UgZ2VucmUgZGUgc2l0dWF0aW9uIGV0IHF1J2lsIG4neSBhdmFpdCBwYXMgbGlldSBkZSBzJ2FmZm9sZXIuIEVsbGUgbSdhIGFsb3JzIHLpcG9uZHUsIGplIGNpdGUgOg0KqyBTaSB2b3VzIHNhdmlleiBjZSBxdWUgamUgc2Fpcywgdm91cyBhdXJpZXogbGVzIG1haW5zIG1vaXRlcyBldCB2b3VzIHBhc3NlcmlleiBsZSBwbHVzIGNsYWlyIGRlIHZvdHJlIHRlbXBzIOAgdm91cyBhc3N1cmVyIHF1ZSBwZXJzb25uZSBuZSB2b3VzIHN1aXQuIENvbXByZW5lei1tb2kgYmllbiwgY2UgcXVlIGplIHZvdXMgcHJvcG9zZSBhdWpvdXJkJ2h1aSwgYydlc3QgbGEgcGx1cyBncmFuZGUgYWZmYWlyZSBkZSB2b3RyZSBjYXJyaehyZS4gRW4gculhbGl06Swg52EgdmEgbeptZSBiaWVuIGF1LWRlbOAgZGUgdm90cmUgY2FycmnocmUuILsNCkZpbiBkZSBjaXRhdGlvbi4NCg0KSmUgbHVpIGFpIGFsb3JzIGRlbWFuZOkgcG91cnF1b2kgZmFpcmUgYXBwZWwg4CBtb2kuIEVsbGUgbSdhIHLpcG9uZHUgcXVlIGon6XRhaXMgbCdob21tZSBwYXJmYWl0IDogdW4gc2ltcGxlIGTpdGVjdGl2ZSwg4CBwZWluZSByZWNvbm51IGRhbnMgbW9uIOl0YXQsIHRyb3AgYmFuYWwsIHRyb3AgcGV0aXQsIHRyb3AgaW5zaWduaWZpYW50IHBvdXIgYXR0aXJlciBsZXMgcmVnYXJkcyBpbmRpc2NyZXRzLg0KqyBMZXMgcmVnYXJkcyBkZSBxdWkgPyC7DQqrIMAgdm90cmUgYXZpcyA/ILsNCqsgRulk6XJhdXggPyC7DQqrIFBldXQt6nRyZSBt6m1lIHBsdXMgaGF1dC67DQpKZSBuJ2FpIHBhcyBjb21wcmlzIGNlIHF1J2VsbGUgdm91bGFpdCBkaXJlIHBhciBs4C4gDQoNCkVsbGUgbSdhIGVuc3VpdGUgZGl0IHF1J2VsbGUgbWUgcmVjb250YWN0ZXJhaXQgcG91ciBjb252ZW5pciBkJ3VuIHJlbmRlei12b3VzLiBMZSByZW5kZXotdm91cyBuJ2EgamFtYWlzIGV1IGxpZXUuIA0KUXVlbHF1ZXMgam91cnMgcGx1cyB0YXJkLCBqJ2FpIHJl53UgdW5lIGxldHRyZSBhY2NvbXBhZ27pZSBkJ3VuZSBwZXRpdGUgY2zpLiBEZSBjb3VydGVzIGluc3RydWN0aW9ucyB2aXNpYmxlbWVudCDpY3JpdGVzIOAgbGEgdmEtdml0ZSBtJ29udCBtZW7pIGp1c3F1J+AgdW5lIGNvbnNpZ25lIGRlIGdhcmUgZGFucyBsYXF1ZWxsZSB1bmUgZ3JhbmRlIGVudmVsb3BwZSBtJ2F0dGVuZGFpdC4gRWxsZSBjb250ZW5haXQgcGx1c2lldXJzIHBob3RvZ3JhcGhpZXMsIGFpbnNpIHF1J3VuIG1lc3NhZ2UgZGUgTWFyaWx5biBtJ2V4cGxpcXVhbnQgcXUnZWxsZSBzZSBzZW50YWl0IHN1cnZlaWxs6WUgZXQgcXUndW5lIHJlbmNvbnRyZSBhdXJhaXQg6XTpIHRyb3AgZGFuZ2VyZXVzZS4gSmUgbidhaSBwbHVzIGphbWFpcyBldSBkZSBub3V2ZWxsZXMgZCdlbGxlIGFwcuhzIOdhLg0KDQpDJ2VzdCDgIHBhcnRpciBkZSBjZSBqb3VyLWzgIHF1ZSBtb24gZW5xdep0ZSBhIGNvbW1lbmPpLiANCg0KT3V2cmlyIC4vOiAxIC8wMmJjcCANCk1vdCBkZSBwYXNzZTogWDIzRlJUDQoNCmUyMjINCkTocyBsZSBk6XBhcnQsIGonYWkgZXUgbCdpbXByZXNzaW9uIGRlIG5hdmlndWVyIGRhbnMgbGUgYnJvdWlsbGFyZC4gSmUgbidhdmFpcyByaWVuLCBob3JtaXMgdW4gbm9tLCBCYXJ5IENsdWtzdGVpbiwgZXQgdW4gdmlzYWdlIDogY2VsdWkgZCd1biBob21tZSBxdWksIHN1ciBsZXMgcGhvdG9ncmFwaGllcyBsYWlzc+llcyBwYXIgTWFyaWx5biwgc2VtYmxhaXQg6nRyZSBkJ3VuZSBncmFuZGUgYmFuYWxpdOkuDQpBdmFpcy1qZSDgIGZhaXJlIOAgdW5lIGhpc3RvaXJlIGRlIGRpdm9yY2UgPyBEJ2FybmFxdWUg4CBsJ2Fzc3VyYW5jZSA/IERlIGNvbXBsb3QgZ291dmVybmVtZW50YWwgPyBBdmFpcy1qZSBkYW5zIGxlcyBtYWlucyB1bmUgYWZmYWlyZSBkZSBjb3JydXB0aW9uID8gRGUgbWV1cnRyZSA/DQoNCkFwcuhzIHBsdXNpZXVycyBtb2lzIGQnZW5xdep0ZXMsIGonYWkgcHUgcmVjb25zdGl0dWVyIGwnaGlzdG9pcmUgcXVlIGplIG0nYXR0YWNoZSBtYWludGVuYW50IOAgY29uc2lnbmVyIGljaSwgZGFucyBjZXR0ZSBtYWNoaW5lLg0KDQpSZXZlbm9ucy1lbiBs4CBv+SBub3VzIG5vdXMg6XRpb25zIGFycup06XMuIA0KQmFyeSBlc3QgbW9ydCDgIDQ1IGFucy4NCkJhcnkgZXN0IHZpdmFudCBldCBhIGwnYWxsdXJlIGQndW4gcXVpbnF1YWfpbmFpcmUgcHJvY2hlIGRlIGxhIHJldHJhaXRlLg0KDQpEZXV4IHByb2Js6G1lcyBzZSBwb3NlbnQgYWxvcnMgOiANCkJhcnkgYS10LWlsIGZhbHNpZmnpIHNhIG1vcnQgPyBTaSBvdWksIHBvdXJxdW9pID8NCkJhcnkgZXN0LWlsIGVmZmVjdGl2ZW1lbnQgbW9ydCA/IFNpIG91aSwgcXVpIGVzdCBsJ2hvbW1lIHF1aSByZXNzZW1ibGUg4CBCYXJ5ID8NCg0KTG9yc3F1ZSBqJ2FpIGNvbnN1bHTpIGwnYXZpcyBkZSBk6WPocyBkZSBCYXJ5LCBqZSBtZSBzdWlzIHBvc+kgbGEgcXVlc3Rpb24gc3VpdmFudGUgOiBwb3VyIHF1ZWxsZSByYWlzb24gTWFyaWx5biDpdGFpdCBhYnNlbnRlIGxlIGpvdXIgZGUgbCdleHBsb3Npb24gZCdIb3Jpem9uID8gRXN0LWNlIHF1ZSBCYXJ5IGx1aSBhdXJhaXQgZGVtYW5k6SBkZSBuZSBwYXMgdmVuaXIgY2UgbWF0aW4tbOAgPyANClJldG91cm5vbnMgbGUgcHJvYmzobWUgZGFucyBsJ2F1dHJlIHNlbnM6IGVzdC1jZSBxdSdlbGxlIHNhdmFpdCBxdWVscXVlIGNob3NlIHF1ZSBCYXJ5IGx1aS1t6m1lIGlnbm9yYWl0ID8gQXVxdWVsIGNhcywgcG91cnF1b2kgbmUgbCdhdXJhLXQtZWxsZSBwYXMgcHLpdmVudSA/DQoNCk9uIGVzdCBlbiBkcm9pdCBkZSBzZSBkZW1hbmRlciBzaSBCYXJ5IGVzdCB2cmFpbWVudCBtb3J0IGNlIGpvdXItbOAuIFBvdXIgyWxpc2FiZXRoLCBpbCBuJ3kgYSBhdWN1biBkb3V0ZS4gRWxsZSBhIHByb2PpZOkg4CBsJ2lkZW50aWZpY2F0aW9uIGR1IGNvcnBzLCBlbGxlIGEgb3JnYW5pc+kgbCdlbnRlcnJlbWVudCwgdHLocyBzb2JyZW1lbnQsIHRy6HMgZGlnbmVtZW50LCBwdWlzIGVsbGUgYSBjb250aW516SDgIOlsZXZlciBzZXMgdHJvaXMgZmlsbGVzLCBzZXVsZS4gDQpTaSBCYXJ5IGF2YWl0IHN1cnbpY3UsIHBvdXJxdW9pIGF1cmFpdC1pbCBhYmFuZG9ubukgc2EgZmFtaWxsZSA/IA0KDQpRdWkgZXN0IGRvbmMgbCdob21tZSBlbiAvZTIyMyA/IEJhcnksIGxlIGJvdXJyZWF1IGRlIHRyYXZhaWwsIGxlIGJvbiBw6HJlIGRlIGZhbWlsbGUsIG91IEJhcnksIGwnaG9tbWUgcXVpIGEgcmVmYWl0IHNhIHZpZSBhdmVjIE1hcmlseW4sIHNvbiBhbW91ciBkZSBqZXVuZXNzZSwgcGV1dC3qdHJlIG3qbWUgc29uIGFtYW50ZSBkZSB0b3Vqb3VycyA/IFNlcmlvbnMtbm91cyBmYWNlIOAgdW5lIGJhbmFsZSBoaXN0b2lyZSBkJ2FkdWx06HJlID8gQmFyeSBhdXJhaXQgYWluc2kgZmVpbnQgc2EgbW9ydCBwb3VyIHF1aXR0ZXIgc2EgZmFtaWxsZSBldCByZXRyb3V2ZXIgTWFyaWx5biA/IElsIGF1cmFpdCBhbnRpY2lw6SBsJ2V4cGxvc2lvbiBkJ0hvcml6b24sIG91IHBpcmUsIGlsIGwnYXVyYWl0IHByb3ZvcXXpLCB0b3V0IOdhIHBvdXIgcG91dm9pciBkaXNwYXJh7nRyZSBhdmVjIHNhIG1h7nRyZXNzZSA/IA0Kx2EgbmUgdGllbnQgcGFzIGRlYm91dC4gDQoNCkF1IGZvbmQsIHBldXQt6nRyZSBxdWUgY2V0dGUgYWZmYWlyZSBuZSBjb25jZXJuZSBwYXMgQmFyeSBsdWktbeptZSwgbWFpcyBGb3N0ZXIgUmVzZWFyY2guIENhciBhcHLocyB0b3V0LCBNYXJpbHluIG5lIHNlIHNlcmFpdCBwYXMgZG9ubukgYXV0YW50IGRlIG1hbCBwb3VyIG1lIGNvbnRhY3RlciBzJ2lsIHMnYWdpc3NhaXQgbOAgZCd1bmUgc2ltcGxlIGhpc3RvaXJlIGQnYWR1bHTocmUuIA0KDQpSZXByZW5vbnMgZGVwdWlzIGxlIGTpYnV0LiANCg0KT24gc2FpdCBxdSdIb3Jpem9uIEluZHVzdHJpZXMgZXQgRm9zdGVyIFJlc2VhcmNoIG9udCB0b3Vqb3VycyDpdOkgZGV1eCBlbnRyZXByaXNlcyBpbnRpbWVtZW50IGxp6WVzIHBhciBsZXVyIGNvbmN1cnJlbmNlLiBFbGxlcyBzb250IOlnYWxlbWVudCBsaellcyBwYXIgbGUgdHJhdmFpbCBxdWUgQmFyeSBhIHLpYWxpc+kgZW4gbGV1ciBzZWluLiBEJ2FpbGxldXJzLCBsJ2V4aXN0ZW5jZSBt6m1lIGR1IHByb2pldCBIb3Jpem9uIHBlcm1ldCBkZSBwb3J0ZXIgdW4gb2VpbCBub3V2ZWF1IHN1ciBsZXMgcmVjaGVyY2hlcyBxdWUgQmFyeSBhIG1lbullcyBjaGV6IEZvc3RlciBSZXNlYXJjaC4gDQpNb24gaWTpZSBlc3QgbGEgc3VpdmFudGU6IHBldXQt6nRyZSBxdWUgbGVzIGRldXggZW50cmVwcmlzZXMgdHJhdmFpbGxhaWVudCBzdXIgZGVzIHByb2pldHMgc2ltaWxhaXJlcywgc2lub24gaWRlbnRpcXVlcy4gUGV1dC3qdHJlIG3qbWUgcXVlIEJhcnkgYSBjb250aW516SBjaGV6IEhvcml6b24gY2UgcXUnaWwgYXZhaXQgZOlidXTpIGNoZXogRm9zdGVyLiBPdSBwZXV0Lep0cmUgcXUnaWwgYSBzaW1wbGVtZW50IHJlY29tbWVuY+kuDQoNCmUyMjQNClF1ZSBzYXZvbnMtbm91cyBy6WVsbGVtZW50IGRlcyB0cmF2YXV4IG1lbulzIHBhciBCYXJ5IGNoZXogRm9zdGVyIFJlc2VhcmNoID8NClF1ZWxsZXMgZOljb3V2ZXJ0ZXMgb250IOl06SBmYWl0ZXMgYXZlYyBjZSBwcmVtaWVyIHLpYWN0ZXVyID8NCkF1IGZvbmQsIHOSYWdpc3NhaXQtaWwgdnJhaW1lbnQgZCd1biBy6WFjdGV1ciA/DQoNCk9uIHNhaXQgcXUndW4gZGVzIGZpbHMgcm91Z2VzIGRlIEZvc3RlciBSZXNlYXJjaCBhIHRvdWpvdXJzIOl06SBsYSByZWNoZXJjaGUgc3VyIGxhIHBoeXNpcXVlIGRlcyBwYXJ0aWN1bGVzLiBMJ2VudHJlcHJpc2UgbidhIGRvbmMgamFtYWlzIHZyYWltZW50IGFiYW5kb25u6SBsJ+luZXJnaWUgbnVjbOlhaXJlLCBwYXMgbeptZSBhcHLocyBsZSBmaWFzY28gZHUgZOlzZW5nYWdlbWVudCBkZSBsJ+l0YXQuIE1haXMgcG91cnF1b2kgYXZvaXIgcG91cnN1aXZpIGxlcyByZWNoZXJjaGVzIGRhbnMgY2V0dGUgZmlsaehyZSBzaSBlbGxlIG4n6XRhaXQgcGFzIGRlc3RpbullIOAg6nRyZSBleHBsb2l06WUgY29tbWVyY2lhbGVtZW50ID8NCkxhIHB1aXNzYW5jZSBldCBsYSB0YWlsbGUgZGUgY2VzIHLpYWN0ZXVycyDpdGFpZW50IGluY29tcGF0aWJsZXMgYXZlYyB1bmUgc2ltcGxlIHZvY2F0aW9uIGRlIHJlY2hlcmNoZSBleHDpcmltZW50YWxlLiBBbG9ycywgcG91ciBxdWVsbGUgcmFpc29uIEZvc3RlciBzJ2VzdC1pbCBlbnTqdOkg4CBsZXMgbGFpc3NlciBmb25jdGlvbm5lciA/IFBvdXIgc2EgcHJvcHJlIGNvbnNvbW1hdGlvbiBkJ+lsZWN0cmljaXTpID8gRGFucyBjZSBjYXMsIHBvdXJxdW9pIGF2b2lyIGJlc29pbiBkJ3VuZSBxdWFudGl06SBkJ+luZXJnaWUgYXVzc2kgcGjpbm9t6W5hbGUgPw0KDQpMJ+l26G5lbWVudCBxdWkgYXVyYSBwZXV0Lep0cmUgcG91c3PpIEJhcnkg4CBxdWl0dGVyIEZvc3RlciBlc3QsIGplIGNyb2lzLCBsaekg4CB1biBkZSBjZXMgculhY3RldXJzLiANCg0KQXUgY291cnMgZGUgbWVzIHJlY2hlcmNoZXMsIGplIHN1aXMgdG9tYukgc3VyIHVuIHJhcHBvcnQgZGF06SBkdSA2IGbpdnJpZXIgMTk2My4gSWwgY29uY2VybmUgdW4g6XbobmVtZW50IG9ic2VydukgcGFyIHVuIOl0dWRpYW50IGRlIGwnb2JzZXJ2YXRvaXJlIExvd2VsbCBlbiBBcml6b25hLiANCkonYWkgY29tcGls6SBkZXMgZXh0cmFpdHMgZGUgY2UgcmFwcG9ydCBlbiAuLzogMSAvTG93ZWxsLg0KQ29uc3VsdGV6LWxlIGF2YW50IGQnYWxsZXIgcGx1cyBsb2luLg0KTW90IGRlIHBhc3NlOiBYMTI0WTgNCg0KLQ0KDQpMZSByYXBwb3J0IExvd2VsbCBhIOl06SBzaSBwZXUgcHJpcyBhdSBz6XJpZXV4IHF1ZSBsJ2FkbWluaXN0cmF0aW9uIGwnYSB2aXRlIHJhbmfpIGRhbnMgbGUgdGlyb2lyIHLpc2VydukgYXV4IG92bmlzLiANCg0KSWwgbSdhIGQnYWJvcmQgcGFydSDpdHJhbmdlIHF1ZSBjZXR0ZSBoaXN0b2lyZSBuJ2FpdCwg4CBsJ+lwb3F1ZSwgcGFzIGZhaXQgbGEgdW5lIGRlcyBqb3VybmF1eCBsb2NhdXguIFBhcmFkb3hhbGVtZW50LCBldCBjb21tZSBleHBsaXF16SBkYW5zIGxlIHJhcHBvcnQgTG93ZWxsLCBsYSBuYXR1cmUgdHLocyBkaWZmdXNlIGRlIGxhIGNvbG9ubmUgbHVtaW5ldXNlIGwnYXVyYWl0IHJlbmR1ZSBpbmRpc2Nlcm5hYmxlIGF1eCB5ZXV4IGQndW4gaW5kaXZpZHUgcHLpc2VudCBkYW5zIHVuIG1pbGlldSBwb2xsdekgcGFyIGwn6WNsYWlyYWdlIHVyYmFpbiBldC9vdSB0cm9wIHByb2NoZSBkZSBsYSBzb3VyY2UgZCfpbWlzc2lvbiAoY29tbWUgYydlc3QgcGFyIGV4ZW1wbGUgbGUgY2FzIHBvdXIgdW4gYXJjLWVuLWNpZWwpLCByYWlzb25zIHBvdXIgbGVzcXVlbGxlcyBhdWN1bmUgYW5vbWFsaWUgbmUgc2VtYmxlIGF2b2lyIOl06SByZWxldullIGFpbGxldXJzIHF1ZSBkZXB1aXMgdW4gcG9pbnQgZCdvYnNlcnZhdGlvbiBwcml2aWzpZ2npLg0KDQpTaSBsZSBzZW5zIGRlIGwnb3JpZW50YXRpb24gZHUgamV1bmUgQm93bWFuIGVzdCBqdXN0ZSwgbGEgc291cmNlIGQn6W1pc3Npb24gc2UgdHJvdXZhaXQgcXVlbHF1ZSBwYXJ0IGF1IHN1ZC1vdWVzdCBkZSBsJ29ic2VydmF0b2lyZSwg4CB1bmUgZGlzdGFuY2UgZGUgbCdvcmRyZSBkZSBwbHVzaWV1cnMgZGl6YWluZXMgZGUga2lsb23odHJlcy4gQ2V0dGUgZGlyZWN0aW9uIHBvaW50ZSBqdXN0ZW1lbnQgdmVycyBsZXMgcGV0aXRlcyBtb250YWduZXMgZGUgbGEgUHJlc2NvdHQgTmF0aW9uYWwgRm9yZXN0LCBsaWV1IG/5IHNlIGNhY2hhaXQgbGUgcGx1cyBncmFuZCBjZW50cmUgZGUgcmVjaGVyY2hlIGRlIEZvc3Rlci4gU3Vybm9tbekgc2l0ZSBCLCBsZSBjb21wbGV4ZSDpdGFpdCBpbnN0YWxs6SBkYW5zIHVuZSBhbmNpZW5uZSBtaW5lIGRlIHZhbmFkaXVtLCBlbnRyZSBsZXMgdmlsbGVzIGRlIENoaW5vIFZhbGxleSBldCBQcmVzY290dCwgc29pdCBlbnZpcm9uIOAgMTAwIGttIGRlIGwnb2JzZXJ2YXRvaXJlIExvd2VsbC4gRW4gdG91dCDpdGF0IGRlIGNhdXNlLCBsZSBzaXRlIEIgYXVyYWl0IHRy6HMgYmllbiBwdSDqdHJlIOAgbCdvcmlnaW5lIGRlIGNldHRlIOl0cmFuZ2UgY29sb25uZSBkZSBsdW1p6HJlIGJsZXVlLiAgDQoNCkNhY2jpIGRlcnJp6HJlIHVuIG5vbSBkJ2VtcHJ1bnQsIGonYWkgcul1c3NpIOAgb2J0ZW5pciB1biByZW5kZXotdm91cyBhdmVjIHVuIG1lbWJyZSBkZSBsJ0FFQy4gUXVhbmQgamUgbHVpIGFpIGRlbWFuZOkgcydpbCBhdmFpdCBk6WrgIGVudGVuZHUgcGFybGVyIGRlIGNldHRlIGNvbG9ubmUgZGUgbHVtaehyZSwgaWwgbSdhIHLpcG9uZHUsIGplIGNpdGUgOg0KqyBWb3VzIHNhdmV6LCBpbCB5IGEgdG91am91cnMgZGVzIHTpbW9pZ25hZ2VzIGRlIHBo6W5vbehuZXMg6XRyYW5nZXMgZGFucyBsYSBy6Wdpb24sIG1haXMgamUgdmFpcyB2b3VzIGRpcmUgdW5lIGNob3NlLCBxdWFuZCB2b3VzIOp0ZXMgdW4gZ2FtaW4gZGUgbGEgdmlsbGUgZXQgcXVlIHZvdXMgYWxsZXogY2FtcGVyIGF1IHBpZWQgZGVzIGNvbG9ubmVzIGRlIGdy6HMgZGUgTW9udW1lbnQgVmFsbGV5LCBsZSB0b3V0IGF2ZWMgbGVzIHBvY2hlcyByZW1wbGllcyBkZSBwc3ljaG90cm9wZXMsIGV0IGJpZW4gamUgcGV1eCB2b3VzIGdhcmFudGlyIHF1ZSB2b3VzIHZveWV6IGRlcyBjaG9zZXMgcGx1cyDpdHJhbmdlcyBsZXMgdW5lcyBxdWUgbGVzIGF1dHJlcyAhILsNCqsgSmUgbmUgdm91cyBwYXJsZSBwYXMgZGUgTW9udW1lbnQgVmFsbGV5LCBtYWlzIGRlIGxhIGZvcup0IGRlIFByZXNjb3R0LiC7DQqrIFF1aSB2b3VzIGVudm9pZSBtb25zaWV1ciBIYXJmb3JkID8guw0KqyBQZXJzb25uZSwgamUgdm91cyBhaSBleHBsaXF16SBxdWUgaifpdGFpcyB1biBjaGFzc2V1ciBkJ292bmkuILsNCkFwcuhzIGF2b2lyIG5lcnZldXNlbWVudCDpY3Jhc+kgc2EgY2lnYXJldHRlIGRhbnMgdW4gY2VuZHJpZXIsIGlsIG0nYSBy6XbpbOkgcXUnaWwgYXZhaXQgZOlq4CBlbnRlbmR1IHBhcmzpIGRlIGNlcyBjb2xvbm5lcyBkZSBsdW1p6HJlLCBwZXV0Lep0cmUgdW5lIGZvaXMgb3UgZGV1eCBhdSBjb3VycyBkZSBzZXMgdmluZ3QgYW5u6WVzIGRlIGNhcnJp6HJlIOAgbCdBRUMuDQqrIFVuZSBmb2lzLCBvdSBkZXV4IGZvaXMgPyC7DQqrIFF1ZWxsZSBpbXBvcnRhbmNlID8gU2kgZGV1eCBwZXJzb25uZXMgdm9pZW50IGxhIGRhbWUgYmxhbmNoZSBhdSBt6m1lIGVuZHJvaXQg4CBkaXggYW5zIGQn6WNhcnQsIOdhIG4nYSBwYXMgdmFsZXVyIGRlIHbpcml06SwgY2Ugc29udCBqdXN0ZSBkZXV4IGl2cm9nbmVzIHF1aSBvbnQgcHJpcyBsZSBt6m1lIHZpcmFnZSBldCBxdWkgb250IOl06SDpYmxvdWllIGRlIGxhIG3qbWUgZmHnb24gcGFyIGxlcyBwaGFyZXMgZCd1bmUgbW90by4guyANCkonYWkgZW5zdWl0ZSBpbnNpc3TpIGV0IGplIGx1aSBhaSBkZW1hbmTpIHNpIGwnYWdlbmNlIGF2YWl0IHVuZSBpZOllIHBy6WNpc2UgZGVzIHRyYXZhdXggculhbGlz6XMgcGFyIEZvc3RlciBSZXNlYXJjaCBhdSBk6WJ1dCBkZXMgYW5u6WVzIDYwLiBJbCBtJ2Egculwb25kdSBlbiBtZSByYWNvbnRhbnQgbCdoaXN0b2lyZSBkdSBsYWJvcmF0b2lyZSBwcml26SBkJ0FyZ29ubmUsIHNldWxlIHN0cnVjdHVyZSBwcml26WUsIGFwcuhzIEZvc3Rlciwg4CBhdm9pciByZed1IGwnYXZhbCBkZSBsJ0FFQyBwb3VyIGVmZmVjdHVlciBkZXMgcmVjaGVyY2hlcyBzdXIgbGVzIHLpYWN0ZXVycyBudWNs6WFpcmVzLiBJbCBtJ2EgZXhwbGlxdekgY29tbWVudCwgZW4gMTk0MiwgbGUgbGFib3JhdG9pcmUgYXZhaXQgbWlzIGF1IHBvaW50IGxlIHRvdXQgcHJlbWllciBy6WFjdGV1ciBhdSBtb25kZSwgbGUgQ2hpY2FnbyBQaWxlLTEsIGV0IGF2ZWMgcXVlbCBkZWdy6SBkZSBwculjYXV0aW9uIGwnZXhw6XJpZW5jZSBhdmFpdCDpdOkgbWVu6WUgOg0KqyBDJ+l0YWl0IHVuIGdyb3MgdGFzIGRlIGJyaXF1ZXMgaW5zdGFsbOkgc291cyBsZXMgZ3JhZGlucyBkdSBTdGFnZyBGaWVsZCwgZW4gcGxlaW4gY29ldXIgZGUgQ2hpY2Fnby4guw0KRW4gc3Vic3RhbmNlLCBpbCBtJ2EgZmFpdCBjb21wcmVuZHJlIHF1ZSBsJ0FFQyDpdGFpdCBhc3NleiBwZXUgcmVnYXJkYW50IHN1ciBsZSBwb3VycXVvaSBkdSBjb21tZW50LCBkdSBtb21lbnQgcXUnb24gbHVpIGZvdXJuaXNzYWl0IGRlcyBy6XN1bHRhdHMuIA0KSmUgbHVpIGFpIGFsb3JzIGRlbWFuZOkgc2kgbCdhZ2VuY2UgZmFpc2FpdCBjb3JyZWN0ZW1lbnQgc29uIHRyYXZhaWwgZGUgc3VydmVpbGxhbmNlIGRlcyBpbnN0YWxsYXRpb25zIG51Y2zpYWlyZXMgZHUgcGF5cyBvdSBzaSBlbGxlIGF0dGVuZGFpdCBxdSd1bmUgY2F0YXN0cm9waGUgc2UgcHJvZHVpc2UgY29tbWUgcG91ciBsZSBwcm9qZXQgSG9yaXpvbi4gSWwgcydlc3QgYWxvcnMgbGV26SwgbSdhIHRyYWl06SBkZSBzYWxlIGhpcHBpZSBldCBhIG1pcyBmaW4g4CBub3RyZSByZW5jb250cmUuIElsIGEgc3VyZW1lbnQgY3J1IHF1ZSBzb3VzIG1vbiBmYXV4IGTpZ3Vpc2VtZW50IGRlIGNoYXNzZXVyIGQnb3ZuaSBzZSBjYWNoYWl0IHVuZSBzb3J0ZSBkZSBtaWxpdGFudCBwb3VyIGwnZW52aXJvbm5lbWVudC4gVGFudCBtaWV1eC4gDQoNClNpIGplIG0nYXR0YXJkZSBhdXRhbnQgc3VyIGNldHRlIGNvbG9ubmUgZGUgbHVtaehyZSBibGV1ZSwgYydlc3QgcXVlIGonYWkgbGUgcHJlc3NlbnRpbWVudCBxdWUgbm90cmUgaGlzdG9pcmUgZ3Jhdml0ZSBhdXRvdXIgZGUgY2V0IOl26G5lbWVudCBwculjaXMuIA0KRW4gZmluIGRlIGNvbXB0ZSwgbGUgdHJhdmFpbCBkdSBk6XRlY3RpdmUgZXN0IGRlIGNvbGxlY3RlciBsZXMgbWlldHRlcywgcGV0aXQg4CBwZXRpdCwgcG91ciByZWNvbnN0aXR1ZXIgZGVzIG1vcmNlYXV4IGRlIHBsdXMgZW4gcGx1cyBncm9zLiANCg0KTCfpcGlzb2RlIGF2b3J06SBkZSBsYSBzdGF0aW9uIHNvdXMtbWFyaW5lIHBvdXJyYWl0IGp1c3RlbWVudCDqdHJlIHVuZSB0cuhzIGdyb3NzZSBtaWV0dGUuDQpQb3VyIHJhcHBlbCwgZOlidXQgZGVzIGFubullcyA2MCwgRm9zdGVyIGFjaOh0ZSB1bmUgcGxhdGUtZm9ybWUgcOl0cm9saehyZSBkYW5zIGxlIGJ1dCBkJ2VuIGZhaXJlIHVuZSBwb3J0ZSBkJ2VudHLpZSB2ZXJzIGwnZXhwbG9yYXRpb24gc291cy1tYXJpbmUuIA0KT2ZmaWNpZWxsZW1lbnQsIGxlIHByb2pldCBuZSBt6G5lIG51bGxlIHBhcnQuIE9mZmljaWVsbGVtZW50IHNldWxlbWVudC4gDQoNCk91dnJpciAuLzogMSAvMDJiY3AgDQoNCmUyMjUNClZvaWNpIHVuZSBkZXMgcmFyZXMgaW1hZ2VzIGRlIFJpY2hhcmQgRm9zdGVyIHB1Ymxp6WVzIGRhbnMgbGEgcHJlc3NlLiBFbGxlIGlsbHVzdHJlIHVuZSBjb3VydGUgaW50ZXJ2aWV3IGRvbm7pZSBwYXIgRm9zdGVyIGF1IHN1amV0IGRlIHNvbiBwcm9qZXQgZGUgc3RhdGlvbiBzb3VzLW1hcmluZS4gRGVycmnocmUgbHVpLCBkZXMgZW5naW5zIHF1J2lsIHBy6XNlbnRlIGNvbW1lIOl0YW50IGRlcyBzb3VzLW1hcmlucyBkZXN0aW7pcyDgIGxhIGZhYnJpY2F0aW9uIGRlIGxhZGl0ZSBzdGF0aW9uLiBJbHMgbmUgc2Vyb250IGphbWFpcyBtaXMg4CBsJ2VhdS4NCg0KZTIyNg0KUG91cnRhbnQsIHRvdXQgc2VtYmxlIGluZGlxdWVyIHF1ZSBjZXMgZW5naW5zIG9udCDpdOkgdXRpbGlz6XMgc3VyIGxlIHNpdGUgQiwgZGFucyBsYSBw6XJpb2RlIGFsbGFudCBkdSBk6WJ1dCBkZXMgYW5u6WVzIDYwIOAgMTk2MywgYW5u6WUgY29uam9pbnRlIGR1IGTpcGFydCBkZSBCYXJyeSBldCBkZSBsJ2FwcGFyaXRpb24gZGUgbGEgY29sb25uZSBkZSBMb3dlbGwuDQpPbiBlc3QgZG9uYyBlbiBkcm9pdCBkZSBzZSBkZW1hbmRlciBzaSBjZXMgc291cy1tYXJpbnMgb250IGJlbCBldCBiaWVuIOl06SBk6XZlbG9wcOlzIHBvdXIgYWxsZXIgc291cyBsJ2VhdSBvdSBzaSwgZOhzIGxldXIgY29uY2VwdGlvbiwgaWxzIOl0YWllbnQgZGVzdGlu6XMg4CB0b3V0IGF1dHJlIGNob3NlLiANCk1haXMgZGFucyBjZSBjYXMsIOAgcXVvaSA/DQoNCmUyMjcNCk9udC1pbHMgdW4gcmFwcG9ydCBhdmVjIGxlcyByZWNoZXJjaGVzIG1lbullcyBwYXIgQmFyeSBzdXIgbGEgcGh5c2lxdWUgZGVzIHBhcnRpY3VsZXMgPw0KU3VyIGxlcyBy6WFjdGV1cnMgZXV4LW3qbWVzID8NCg0KRGFucyBsZXMgZG9jdW1lbnRzIHF1J8lsaXNhYmV0aCBhIGJpZW4gdm91bHUgbWUgY29uZmllciwgaWwgeSBhdmFpdCB1biBkb3NzaWVyIHJlZ3JvdXBhbnQgZGVzIHBob3RvZ3JhcGhpZXMgZCdleHDpcmllbmNlcywgZGVzIGJyaWJlcyBkZSBjb21wdGVzLXJlbmR1cywgZXQgZGl2ZXJzIHNjaOltYXMgcmVuZGFudCBjb21wdGUgZGVzIHJlY2hlcmNoZXMgbWVu6WVzIHBhciBCYXJ5LiANCkJpZW4gcXVlIGNlcyBkb2N1bWVudHMgc29pZW50IGltcG9zc2libGVzIOAgaW50ZXJwcul0ZXIgc2FucyB1biBoYXV0IG5pdmVhdSBlbiBwaHlzaXF1ZSwgaWxzIHBlcm1ldHRlbnQgZGUgbWlldXggZW50cmV2b2lyIGxhIG5hdHVyZSBkZXMgdHJhdmF1eCBxdWUgQmFyeSBtZW5haXQgYXUgc2l0ZSBCLiAgDQpWb3VzIHBvdXZleiBsZXMgY29uc3VsdGVyIGVuIC4vOiAxIC8wM2JjcA0KTW90IGRlIHBhc3NlIDogWDQ1WTc4DQoNCkwnaW1hZ2UgZTMzOSBlc3QgcG91ciBtb2kgbGEgcGx1cyBpbnRyaWdhbnRlLg0KU2Vsb24gdG91dGUgdnJhaXNlbWJsYW5jZSwgZWxsZSByZXBy6XNlbnRlIGxlIHLpYWN0ZXVyIHN1ciBsZXF1ZWwgQmFyeSB0cmF2YWlsbGFpdC4gTGEgZm9ybWUgZXQgbGEgdGFpbGxlIHNvbnQgZW4gdG91dCBjYXMg6XRyYW5nZW1lbnQgc2ltaWxhaXJlcy4gTGUgcG9pbnQgbGUgcGx1cyBpbnTpcmVzc2FudCBlc3QgbGEgcHLpc2VuY2UgZGUgY2VzIGRldXggc3Bo6HJlcyBhdSBjZW50cmUuIERldXggZW5naW5zIHBsYWPpcyBmYWNlIOAgZmFjZS4gQXZvbnMtbm91cyBpY2kgbGVzIGRldXggc291cy1tYXJpbnMgY29uc3RydWl0cyBwYXIgRm9zdGVyID8gU2kgYydlc3QgYmllbiBsZSBjYXMsIGFsb3JzIG5vdXMgYXZvbnMgbGEgcHJldXZlIHF1J2lsIG5lIHMnYWdpc3NhaXQgcGFzIGRlIHNvdXMtbWFyaW4uIE1haXMgYWxvcnMsIOAgcXVvaSBwb3V2YWllbnQgYmllbiBzZXJ2aXIgY2VzIGFwcGFyZWlscyA/IA0KDQpDb25zdWx0b25zIOAgbm91dmVhdSBsZSAuLzogMSAvMDJiY3ANCkxhIHBob3RvZ3JhcGhpZSBlMjI2IG5vdXMgY29uZmlybWUgdW5lIGNob3NlIDogY2VzIGVuZ2lucyBwZXJtZXR0YWllbnQg4CB1biBob21tZSBkZSBzJ3kgaW5zdGFsbGVyLiBMYSBlMjI1IG5vdXMgbW9udHJlIGxhIHBy6XNlbmNlIGRlIGJyYXMgbeljYW5pcXVlcyBkZXN0aW7pcywgY29tbWUgb24gcGV1dCBsJ2ltYWdpbmVyLCDgIG1hbmlwdWxlciBxdWVscXVlIGNob3NlLg0KTWFuaXB1bGVyIGwnZW5naW4gYXVxdWVsIGlscyBmb250IHJlc3BlY3RpdmVtZW50IGZhY2UgPw0KTWFuaXB1bGVyIHF1ZWxxdWUgY2hvc2Ug4CBsJ2ludOlyaWV1ciBt6m1lIGR1IHLpYWN0ZXVyID8NCg0KUXVlbCB0eXBlIGQnZXhw6XJpZW5jZSBheWFudCBsaWV1IGF1IHNlaW4gZCd1biBy6WFjdGV1ciBudWNs6WFpcmUgbuljZXNzaXRlIGxhIHBy6XNlbmNlIGQndW4gaG9tbWUgZW4gc29uIGNvZXVyID8NCkNlcyBkZXV4IGVuZ2lucyBzb250LWlscyBkZXMgYWRqdXZhbnRzIGRlIGNlcyBleHDpcmllbmNlcywgZW4gc29udC1pbHMg4CBsYSBzb3VyY2UsIGVuIHNvbnQtaWxzIGxlcyBzdWpldHMgPyANCkplIG1lIHBvc2UgY2V0dGUgcXVlc3Rpb24gOiBlc3QtY2UgcXVlIGNlcyBlbmdpbnMgc29udCBsJ+ls6W1lbnQgY2VudHJhbCwgcHJpbW9yZGlhbCwgcHJpbmNpcGFsIGRlcyBleHDpcmllbmNlcyBtZW7pZXMgc3VyIGxlIHNpdGUgQiA/ICANCg0KZTIyNA0KUXVlbGxlIGVzdCBkb25jIGxhIGZvbmN0aW9uIGRlIGNldHRlIG1hY2hpbmUgPw0KSidhaSB1dGlsaXPpLCBk6HMgbGUgZOlwYXJ0LCBsZSB0ZXJtZSBkZSBy6WFjdGV1ci4gQydlc3QgcGV1dC3qdHJlIHVuZSBlcnJldXIgZGUgbWEgcGFydC4gVW4gYWJ1cyBkZSBsYW5nYWdlLiBDYXIsIHNvbW1lcy1ub3VzIHZyYWltZW50IGVuIHBy6XNlbmNlIGQndW4gculhY3RldXIgPyANCkVuIGZpbiBkZSBjb21wdGUsIGwn6W5lcmdpZSBudWNs6WFpcmUgc2kgY2jocmUg4CBGb3N0ZXIgbifpdGFpdCBwZXV0Lep0cmUgcGFzIHByb2R1aXRlIGRpcmVjdGVtZW50IGRhbnMgY2V0dGUgbWFjaGluZS4gUGV1dC3qdHJlIHF1ZSBsJ+luZXJnaWUgbnVjbOlhaXJlIG5lIHNlcnZhaXQgcXUn4CBsJ2FsaW1lbnRlci4gDQpBc3N1cultZW50LCB1bmUgdGVsbGUgcXVhbnRpdOkgZCfpbmVyZ2llIG4n6XRhaXQgcGFzIGRlc3RpbullIOAgYWxsdW1lciBsZXMgYW1wb3VsZXMgZXQgZmFpcmUgY2hhdWZmZXIgbGVzIGdyaWxsZS1wYWluLiBPbiBwZXV0IGRvbmMgaW1hZ2luZXIgcXVlIGxlcyBleHDpcmllbmNlcyBtZW7pZXMgc3VyIGxlIHNpdGUgQiBhdmFpZW50IHBvdXIgdHJhaXQgZGVzIGRvbWFpbmVzIGRlIGhhdXRlIOluZXJnaWUsIGNlbGxlcyBxdWkgbWV0dGVudCBlbiBqZXUgbGVzIHNlY3JldHMgZGUgbGEgbWF0aehyZSwgbCdpbmZpbmltZW50IHBldGl0LCBzb2l0IGRlcyDpY2hlbGxlcyBv+SBsZXMgcuhnbGVzIGRlIGxhIHBoeXNpcXVlIHRlbGxlcyBxdWUgbm91cyBsZXMgY29ubmFpc3NvbnMgc29udCBpbXBy6XZpc2libGVzLCBpbnN0YWJsZXMsIHZvaXJlIG3qbWUgYmFmb3XpZXMuIA0KDQpSYXBwZWxvbnMgcXVlIGxhIG1vdGl2YXRpb24gZGUgUmljaGFyZCBGb3N0ZXIgYXVyYSB0b3Vqb3VycyDpdOkgZCdhbGxlciBs4CBv+SBwZXJzb25uZSBkJ2F1dHJlIG4nZXN0IGFsbOkgYXZhbnQgbHVpLiBMZXMgcmVjaGVyY2hlcyBtZW7pZXMgc3VyIGxlIHNpdGUgQiBhbGxhaWVudCBlbiBjZSBzZW5zLiANCk5vdG9ucyDpZ2FsZW1lbnQgcXUn4CBsJ29yaWdpbmUgZGUgdG91dGUgZOltYXJjaGUgc2NpZW50aWZpcXVlLCBldCDgIHBsdXMgZm9ydGUgcmFpc29uLCBkZSB0b3V0ZSBk6W1hcmNoZSBpbmR1c3RyaWVsbGUsIGlsIHkgYSB1biDpduhuZW1lbnQsIHVuZSBpZOllLCB1bmUg6XBpcGhhbmllLg0KDQpMYSBk6WNvdXZlcnRlIHBhciBIb3Jpem9uIGQndW5lIHJvY2hlIG5vaXJlIGEgcGV1dC3qdHJlIOl06SDgIGwnb3JpZ2luZSBkZSBsYSBjculhdGlvbiBkdSBwcm9qZXQg6XBvbnltZS4gRWxsZSBhIHBldXQt6nRyZSBhdXNzaSDpdOkg4CBsJ29yaWdpbmUgZHUgdHJhbnNmdWdlIGRlIEJhcnkuIE1haXMgcGx1c2lldXJzIGTpdGFpbHMgdHJvdWJsYW50cyBtZSBsYWlzc2VudCDgIHBlbnNlciBxdSdlbGxlIGF1cmFpdCDpZ2FsZW1lbnQgcHUg6nRyZSBsJ29yaWdpbmUgZGVzIHJlY2hlcmNoZXMgbWVu6WVzIHN1ciBsZSBzaXRlIEIuDQpKZSBtJ2V4cGxpcXVlLg0KSG9yaXpvbiBk6WNvdXZyZSBjZXR0ZSByb2NoZSDpdHJhbmdlIGF1IGNvdXJzIGQndW5lIGV4Y2F2YXRpb24sIG1haXMgc2kgb24gcmVnYXJkZSBhdHRlbnRpdmVtZW50IGxhIGNocm9ub2xvZ2llIGRlIEZvc3RlciwgbGEgY29uc3RydWN0aW9uIGR1IKsgculhY3RldXIguyBk6WJ1dGUganVzdGUgYXBy6HMgdW5lIGxhcmdlIGNhbXBhZ25lIGRlIHByb3NwZWN0aW9uIGRlIHDpdHJvbGUgZGFucyBsZSBUZXhhcyBldCBsJ0FyaXpvbmEsIGVuIDE5NDcuIExhIHF1ZXN0aW9uIGVzdCBsYSBzdWl2YW50ZSA7IGVzdC1jZSBxdWUgRm9zdGVyIGF1cmFpdCBwdSDgIGNldHRlIG9jY2FzaW9uIHRyb3V2ZXIgdW5lIGRlIGNlcyByb2NoZXMgbm9pcmVzLCBsYSBwcmVtaehyZSwg4CBzdXBwb3NlciBxdSdpbCB5IGVuIGFpdCBkb25jIHBsdXNpZXVycyA/DQpTaSBvdWksIGlsIGVzdCDpdmlkZW50IHF1ZSBsZXMgZXhw6XJpZW5jZXMgYWxvcnMgbWVu6WVzIHN1ciBjZXR0ZSByb2NoZSBzb250IGFsbOllcyBiZWF1Y291cCBwbHVzIGxvaW4gcXVlIGNlbGxlcyBkJ0hvcml6b24uIFBldXQt6nRyZSBt6m1lIHF1J2VsbGVzIG9udCBhYm91dGkg4CBjZXJ0YWluZXMgZOljb3V2ZXJ0ZXMuIE1haXMgbGVzcXVlbGxlcyA/DQoNCmUyMjgNCkRhbnMgbGUgZG9zc2llciBy6XNlcnbpIGF1eCByZWNoZXJjaGVzIGRlIEJhcnksIGplIHN1aXMgdG9tYukgc3VyIHVuZSBz6XJpZSBkZSBxdWF0cmUgcGhvdG9ncmFwaGllcy4gDQpBdSBk6XBhcnQgZWxsZXMgbmUgbSdvbnQgcGFzIGludGVycGVsbOkuIE9uIHBldXQgeSB2b2lyIHNlcHQgaG9tbWVzLCB2cmFpc2VtYmxhYmxlbWVudCDgIGwnaW506XJpZXVyIG3qbWUgZHUgqyBy6WFjdGV1ciC7LCBlbiB0cmFpbiBkJ2luc3RhbGxlciBxdWVscXVlIGNob3NlLiBPbiByZW1hcnF1ZSBxdWUgbGEgcGFyb2kgc291cyBsZXVycyBwaWVkcyBlc3QgdGFwaXNz6WUgZGUgcGV0aXRlcyBmb3JtZXMgbm9pcmVzLCByb25kZXMsIHBldXQt6nRyZSBsJ2V4dHLpbWl06SBkZSB0dWJlcyA/IE1haXMgZGVzIHR1YmVzIGRlIHF1b2kgPyBDZSBuJ2VzdCBwYXMgYW5vZGluLiBRdWVsIGdlbnJlIGRlIG1hdOlyaWF1eCBwbGFjZS10LW9uIHN1ciB0b3V0ZSB1bmUgcGFyb2ksIGVzcGFj6SBkZSBtYW5p6HJlIHBhcmZhaXRlbWVudCBy6Wd1bGnocmUsIGV0IHF1aSByZXF1aWVydCBsJ2F0dGVudGlvbiBkZSBzZXB0IGhvbW1lcyA/DQoNCkonYWkgZXNzYXnpIGRlIHJldHJvdXZlciBsJ3VuZSBkZSBjZXMgcGVyc29ubmVzLiBMYSB04mNoZSDpdGFpdCBhcmR1ZSA6IHF1YW5kIGlscyBuZSBzb250IHBhcyBtb3J0cywgbGVzIGFuY2llbnMgZW1wbG956XMgZGUgRm9zdGVyIHJlZnVzZW50IGfpbulyYWxlbWVudCBkZSBtZSByZW5jb250cmVyLiBNZXMgcmVjaGVyY2hlcyBtJ29udCBjZXBlbmRhbnQgY29uZHVpdCB2ZXJzIHVuIHJlZ2lzdHJlIGRlcyBk6XBhcnRzIGV0IGFycml26WVzIGRhbnMgbCdlbnRyZXByaXNlLiBFbiBtYWkgMTk1MSBvbiBub3RlIHNlcHQgZOlwYXJ0cyBncm91cOlzLiBJbCBzZSB0cm91dmUgcXVlIGNlcyBzZXB0IHBlcnNvbm5lcyBzb250IGTpY+lk6WVzIHBsdXMgdGFyZCBkYW5zIGwnYW5u6WUsIGRlIGRpdmVyc2VzIGTpZmFpbGxhbmNlcyB2aW9sZW50ZXMgOiBhbultaWUsIGluc3VmZmlzYW5jZSBy6W5hbGUgZXQgaW5mZWN0aW9ucyB0b3V0ZXMgaW1wdXRhYmxlcyDgIGRlcyBjYW5jZXJzLiANCkVzdC1jZSBxdWUgY2VzIHNlcHQgaG9tbWVzIG9udCDpdOkgdmljdGltZXMgZGUgaGF1dGVzIGRvc2VzIGRlIHJhZGlhdGlvbnMgPyBPbiBzYWl0IHF1J+AgbGEgZmluIGRlcyBhbm7pZXMgNDAsIG9uIGNvbm5haXNzYWl0IGVuY29yZSB0cuhzIG1hbCBsZXMgbelmYWl0cyBkZSBsYSByYWRpb2FjdGl2aXTpIHN1ciBsZSBjb3JwcywgZXQgc3VydG91dCwgY29tbWVudCBzJ2VuIHBy6W11bmlyLiBFc3QtY2UgcXVlIGNlcyBob21tZXMgYXVyYWllbnQgbWFuaXB1bOksIGF1IGNvdXJzIGRlIGxhIG3qbWUgcOlyaW9kZSwgZGVzIG1hdOlyaWF1eCBoYXV0ZW1lbnQgcmFkaW9hY3RpZnMgPyBFdCBzaSBjZXR0ZSBw6XJpb2RlIOl0YWl0IGNlbGxlIGRlIGxhIG1pc2UgZW4gcGxhY2UgZGUgY2VzIGdhbGV0dGVzIG5vaXJlcyBkYW5zIGxlIKsgculhY3RldXIguyA/DQoNCkltYWdpbm9ucyBxdWUgbCdoeXBvdGjoc2Ugc29pdCB2cmFpZS4gSWwgZGV2aWVudCBhbG9ycyBub3JtYWwgcXVlIHBvdXIgdG91dGUgbWFuaXB1bGF0aW9uIHVsdOlyaWV1cmUgYXUgY29ldXIgZHUgqyBy6WFjdGV1ciC7LCBGb3N0ZXIgZOljaWRlIGRlIG11bmlyIHNlcyBlbXBsb3npcyBkJ3VuZSBwcm90ZWN0aW9uIHN1ZmZpc2FudGUsIGRlcyBjbG9jaGVzIGRlIGZlciwgZGVzIGJvdWNsaWVycywgZGVzIHBpbmNlcyB06Wxlc2NvcGlxdWVzLCB0b3V0ZXMgc29ydGVzIGQnYXBwYXJlaWxzLCBxdWksIGQnYW3pbGlvcmF0aW9uIGVuIGFt6Wxpb3JhdGlvbiwgYXVyYWllbnQgYWJvdXRpIOAgZGV1eCBlbmdpbnMgc29waGlzdGlxdelzIHJlc3NlbWJsYW50IOl0cmFuZ2VtZW50IOAgZGVzIHNvdXMtbWFyaW5zLg0KTWFpcyBjZSBuJ2VzdCBwYXMgdG91dC4NCg0KZTIyOQ0KSWwgYXBwYXJhaXQgdG91dCDgIGNvdXAg6XZpZGVudCBxdSdlbiBheWFudCBkZSBub3V2ZWF1IOAgZmFpcmUg4CBjZSBtaW5lcmFpIHF1ZWxxdWVzIGFubullcyBwbHVzIHRhcmQsIEJhcnkgcHJlbm5lIGNldHRlIGZvaXMtY2kgbGVzIHBy6WNhdXRpb25zIG7pY2Vzc2FpcmVzIGF2ZWMgY2V1eCBxdWkgc2VyYWllbnQgZGVzdGlu6XMg4CBzJ2VuIGFwcHJvY2hlciwgdm9pcmUg4CBlbiBwculsZXZlciBkZXMg6WNoYW50aWxsb25zLiANCg0KZTIzMA0KUG91ciB0ZXJtaW5lciwgdm9pY2kgbGEgc2V1bGUgZXQgdW5pcXVlIHBob3RvZ3JhcGhpZSDgIG5lIHBhcyBtJ2F2b2lyIOl06SBkb25u6SBwYXIgyWxpc2FiZXRoIG91IE1hcmlseW4uIA0KTCdob21tZSBxdWUgdm91cyB2b3lleiDgIGdhdWNoZSBkZSBsJ2ltYWdlLCBmYWNlIOAgQmFyeSwgc2Ugbm9tbWUgRnJhbmsgUG9vbGUuIENldCBpbmfpbmlldXIgYSB0cmF2YWlsbOkgc3VyIGxlIHNpdGUgQiBkZSAxOTU2IOAgMTk2MSwgYW5u6WUgZGUgc2EgZGlzcGFyaXRpb24uIA0KQ2V0dGUgcGhvdG9ncmFwaGllIG0nYSDpdOkgY29uZmnpZSBwYXIgc2EgZmVtbWUuIEVsbGUgbSdhIHJhY29udOkgY29tbWVudCBlbGxlIGwnYSBvYnRlbnVlLiANClVuIHNvaXIgZGUgamFudmllciAxOTYxLCBCYXJ5IGx1aS1t6m1lIHNlIHBy6XNlbnRlIOAgc29uIGRvbWljaWxlIHBvdXIgbHVpIGFubm9uY2VyIGxhIGRpc3Bhcml0aW9uIGRlIHNvbiBtYXJpLiBJbCByZXN0ZSBhdmVjIGVsbGUgdW5lIGdyYW5kZSBwYXJ0aWUgZGUgbGEgc29pcullIHBvdXIgZXNzYXllciBkZSBsYSBjb25zb2xlciwgbWFpcyBpbCBuZSBsdWkgZXhwbGlxdWUgamFtYWlzIGNlIHF1aSBzJ2VzdCBwcm9kdWl0LiANCkQnYXBy6HMgbWFkYW1lIFBvb2xlLCBsYSBjb252ZXJzYXRpb24g6XRhaXQg6XRyYW5nZSwgQmFyeSBzZW1ibGFpdCBhYnNlbnQsIGMnZXN0IGxhIHJhaXNvbiBwb3VyIGxhcXVlbGxlLCBqZSBjaXRlIKsgamUgbifpdGFpcyBwYXMgZWZmb25kcullLCBqZSBzZW50YWlzIHF1J2lsIHkgYXZhaXQgcXVlbHF1ZSBjaG9zZSBkZSBmYXV4LCBjb21tZSBzaSBGcmFuayBuJ+l0YWl0IHBhcyB2cmFpbWVudCBtb3J0LCBjb21tZSBzaSBvbiBlc3NheWFpdCBkZSBtZSBjYWNoZXIgbGEgdulyaXTpLiC7DQpRdWFuZCBlbGxlIGRlbWFuZGUg4CB2b2lyIGxlIGNvcnBzIGRlIHNvbiBtYXJpLCBCYXJ5IHNlIG1vbnRyZSDpdmFzaWYuIElsIHBy6XRleHRlIGZpbmFsZW1lbnQgcXVlIHBvdXIgY2F1c2UgZGUgcmFkaWF0aW9uLCBsZSBjb3JwcyBuZSBwb3VycmEgbHVpIOp0cmUgcmVtaXMuDQoNCkZhdXRlIGQnYXZvaXIgcHUgZmFpcmUgc29uIGRldWlsLCBNYWRhbWUgUG9vbGUgY29udGludWUg4CBjZSBqb3VyIGRlIGdhcmRlciBlc3BvaXIuIFNlbG9uIHNlcyBwcm9wcmVzIG1vdHM6IKsgUydpbCB5IGEgdW5lIGNoYW5jZSwgc2kgaW5maW1lIHNvaXQtZWxsZSwgcXVlIEZyYW5rIHNvaXQgdml2YW50LCBhbG9ycyBqZSByZWZ1c2UgZGUgbGUgY29uc2lk6XJlciBjb21tZSBtb3J0LCBldCBqZSByZWZ1c2UgZCfqdHJlIGNvbnNpZOly6WUgY29tbWUgdW5lIHZldXZlLiC7DQpN6m1lIHMnaWwgbid5IGEgcGFzIGV1IGQnZW50ZXJyZW1lbnQsIEZvc3RlciBSZXNlYXJjaCBhIGTpZG9tbWFn6SBtYWRhbWUgUG9vbGUsIHBsdXT0dCB0cuhzIGdyYXNzZW1lbnQsIKsgUG91ciBhY2hldGVyIG1vbiBzaWxlbmNlILsgbSdhLXQtZWxsZSBhdm916SBkJ3VuIGFpciBwcmVzcXVlIGfqbukuDQpSZXN0ZSBxdWUgQmFyeSwgcXVlbHF1ZXMgc2VtYWluZXMgcGx1cyB0YXJkLCBzZSBwculzZW50ZSB1bmUgbm91dmVsbGUgZm9pcyBjaGV6IGxhIKsgdmV1dmUguy4gQ2V0dGUgZm9pcy1jaSwgaWwgZXN0IGJlYXVjb3VwIHBsdXMgZOl0ZW5kdSwgqyBwcmVzcXVlIGpvdmlhbCC7IGQnYXBy6HMgZWxsZS4gQydlc3Qg4CBjZXR0ZSBvY2Nhc2lvbiBxdSdpbCBsdWkgcmVtZXQgY2V0dGUgcGhvdG9ncmFwaGllLiBJbCBlbiBwcm9maXRlIHBvdXIgc2UgcmVt6W1vcmVyIHF1ZWxxdWVzIHNvdXZlbmlycyBwYXNz6XMgYXZlYyBjZSCrIGJvbiB2aWV1eCBGcmFuayC7LCCrIHVuIGFtaSBmaWTobGUguyBkaXhpdCBCYXJ5LCCrIHF1ZWxxdSd1biBkZSBjb25maWFuY2UsIGV4dHLqbWVtZW50IGludGVsbGlnZW50IGV0IGNvdXJhZ2V1eCC7LCCrIHVuIHBpb25uaWVyILsuIA0KQmFyeSBsdWkgZXhwbGlxdWUgcXVlIGxhIHBob3RvZ3JhcGhpZSBhIOl06SBwcmlzZSBxdWVscXVlcyBqb3VycyBzZXVsZW1lbnQgYXZhbnQgbGEgZGlzcGFyaXRpb24gZGUgRnJhbmsuIElsIGFjY2VwdGUgZGUgbHVpIGVuIGZhaXJlIGRvbiwgbWFpcyBpbnNpc3RlIHN1ciBzb24gY2FyYWN06HJlIGNvbmZpZGVudGllbC4NCg0KUXVhbmQgaidhaSBkZW1hbmTpIOAgbWFkYW1lIFBvb2xlIGRlIHNlIHJlbeltb3JlciBsZSBwb2ludCBxdWkgbHVpIGEgc2VtYmzpIGxlIHBsdXMg6XRyYW5nZSBkYW5zIHRvdXRlIGNldHRlIGhpc3RvaXJlLCBsZSBwbHVzIG5vdGFibGUsIGVsbGUgbSdhIHLpcG9uZHUsIGplIGNpdGUgOg0KqyBDb21tZSBqZSB2b3VzIGwnYWkgZGl0LCBqJ2FpIGdhcmTpIGVzcG9pci4gSmUgbmUgc3VpcyBwYXMgZm9sbGUsIHZvdXMgc2F2ZXouIEonYWkgdG91am91cnMgZXNwb2lyLiBKJ2FpIHRvdWpvdXJzIGVzcG9pciBwYXJjZSBxdWUgQmFyeSBtJ2EgcHJlc3F1ZSBsYWlzc+kgZW50ZW5kcmUgcXVlIEZyYW5rIOl0YWl0IHZpdmFudC4gSmUgbGUgc2Fpcy4gSmUgbGUgc2Vucy4gSWwgbidhIGphbWFpcyB1dGlsaXPpIGxlIG1vdCCrIG1vcnQguywgqyBk6WPocyC7LCBuaSBt6m1lIKsgYWNjaWRlbnQguy4gSWwgYSBwYXJs6SBkJ3VuIKsgaW1wcul2dSC7LCBpbCBhIHRvdWpvdXJzIHV0aWxpc+kgbGUgbW90IKsgZGlzcGFyYXRpb24guywgbm9uIHBhcyBwb3VyIHNpZ25pZmllciBzYSBtb3J0LCBtYWlzLCBjb21tZSBqJ2FpIGwnaW1wcmVzc2lvbiwgcG91ciBkaXJlIHF1J2lsIGF2YWl0IHRvdXQgc2ltcGxlbWVudCBkaXNwYXJ1LiC7DQpGaW4gZGUgY2l0YXRpb24uIA0KDQpEaWZmaWNpbGUgZGUgc2F2b2lyIGNlIHF1aSBlc3QgdnJhaW1lbnQgYXJyaXbpIOAgRnJhbmsgUG9vbGUuIFNpIG9uIGFuYWx5c2UgbGEgcGhvdG9ncmFwaGllLCBvbiByZW1hcnF1ZSB0cuhzIHZpdGUgcXVlIGx1aSBldCBCYXJ5IHNlIHRpZW5uZW50IHByb2JhYmxlbWVudCBhdXggZW52aXJvbnMgZHUgculhY3RldXIsIHNpIGNlIG4nZXN0IOAgbCdpbnTpcmlldXIgbeptZS4gVW5lIGNlcnRpdHVkZSBjZXBlbmRhbnQgOiBsYSBwcm90dWLpcmFuY2Ug4CBnYXVjaGUgZGUgbCdpbWFnZSBlc3QgZW4gculhbGl06SBsJ2V4dHLpbWl06SBkJ3VuIGRlcyBkZXV4IGVuZ2lucyBkZSBwcm90ZWN0aW9uLCBsZXMgZmFtZXV4IKsgc291cy1tYXJpbnMguy4gTGEgY29tcGFyYWlzb24gYXZlYyBsYSBwaG90b2dyYXBoaWUgL2UxMjYgbmUgbGFpc3NlIGF1Y3VuZSBwbGFjZSBhdSBkb3V0ZS4NCg0KQ2V0dGUgZGVybmnocmUgbWlldHRlIGQnaW5mb3JtYXRpb24gcydham91dGUgZG9uYyDgIHRvdXRlcyBjZWxsZXMgculjb2x06WVzIGp1c3F1J2ljaS4NClF1J2VsbGUg6XRhaXQgbGEgZm9uY3Rpb24gZGUgY2VzIGRldXggZW5naW5zID8gUXUnZWxsZSDpdGFpdCBsYSBmb25jdGlvbiBkdSCrIHLpYWN0ZXVyILsgPyBRdSdlc3QtaWwgYXJyaXbpIOAgRnJhbmsgUG9vbGUgPyBQZXV0LW9uIGltYWdpbmVyIHF1ZSBzb24gdHJhdmFpbCBsJ2FpdCBhbWVu6SDgIHBpbG90ZXIgdW4gZGUgY2VzIGVuZ2lucyA/IFMnZXN0LWlsIHJldHJvdXbpIGF1IGNvZXVyIGQndW5lIGV4cOlyaWVuY2UgcXVpIGF1cmFpdCBtYWwgdG91cm7pID8gUydlc3QtaWwgcmV0cm91dukgYXUgY29ldXIgZCd1bmUgZXhw6XJpZW5jZSBxdWksIGF1IGNvbnRyYWlyZSwgYSBmaW5pIHBhciBkb25uZXIgZGVzIHLpc3VsdGF0cyBwb3NpdGlmcywgb3UgZHUgbW9pbnMsIGVzcOly6XMsIGp1c3RpZmlhbnQgYWluc2kgbGUgY2FyYWN06HJlIKsgam92aWFsILsgZGUgQmFyeSA/IA0KDQpDb21tZW50IGRvaXQtb24gaW50ZXJwcul0ZXIgbGUgcHJlc3NlbnRpbWVudCBkZSBtYWRhbWUgUG9vbGUuIEF2b25zLW5vdXMgbOAgdW5lIGZlbW1lIGTpc2VzcOly6WUsIHF1aSBzJ2FjY3JvY2hlIOAgbGEgbW9pbmRyZSBicmliZSBkJ2VzcG9pciA/IE91IGJpZW4gYS10LWVsbGUgZmluYWxlbWVudCByYWlzb24gcXVhbmQgZWxsZSBleHBsaXF1ZSBxdWUgQmFyeSBsdWktbeptZSBuZSBzZW1ibGFpdCBwYXMgY3JvaXJlIOAgbGEgbW9ydCBkZSBGcmFuayA/IFBvdXJ0YW50LCBCYXJ5IOl0YWl0IHByb2JhYmxlbWVudCBs4CBsZSBqb3VyIGRlIHNhIGRpc3Bhcml0aW9uLCBjb21tZW50IGF1cmFpdC1pbCBwdSBkb3V0ZXIgZHUgc29ydCBy6XNlcnbpIOAgbCdpbmfpbmlldXIgPyBDb21tZW50IEJhcnkgcG91dmFpdC1pbCBlbiBkb3V0ZXIgPyBJbCBzYXZhaXQgY2UgcXUnaWwgbHVpIOl0YWl0IGFycml26SwgYydlc3QgY2VydGFpbi4gDQoNCkRhbnMgY2V0dGUgaGlzdG9pcmUsIHRvdXQgc2VtYmxlIGdyYXZpdGVyIGF1dG91ciBkdSBzaXRlIEIsIGV0IGRlIGNlIKsgculhY3RldXIguy4gQmFyeSBhIGZhaXQgZGVzIHJlY2hlcmNoZXMgZW4gcGh5c2lxdWUgZGVzIHBhcnRpY3VsZXMsIGlsIGEgcGFydGljaXDpIOAgbCfpbGFib3JhdGlvbiBkZSBjZXR0ZSBtYWNoaW5lLCBpbCBsJ2EgZmFpdCBmb25jdGlvbm5lciwgZXQgaWwgeSBhIHLpYWxpc+kgcGx1c2lldXJzIGV4cOlyaWVuY2VzLiBMJ3VuZSBkJ2VsbGVzIGEgcGV1dC3qdHJlIGNhdXPpIGwnYXBwYXJpdGlvbiBkJ3VuZSDpdHJhbmdlIGNvbG9ubmUgZGUgbHVtaehyZSBibGV1ZSBpbXB1dGFibGUg4CBkJ2ludGVuc2VzIHJhZGlhdGlvbnMuIENlcyBleHDpcmllbmNlcyBvbnQgcGV1dC3qdHJlIHNjZWxs6SBsZSBkZXN0aW4gZGUgQmFyeSwgdm9pcmUgbeptZSBjZWx1aSBkZSBGb3N0ZXIsIHF1aSBtZXR0cmEgbGEgY2zpIHNvdXMgbGEgcG9ydGUgcXVlbHF1ZSB0ZW1wcyBwbHVzIHRhcmQuIEJhcnkgcydlbiB2YSBjaGV6IEhvcml6b24sIGV0IHJlcHJlbmQgc2VzIHJlY2hlcmNoZXMg4CB66XJvLiBPdSBwZXV0Lep0cmUgcGFzIOAgeulyby4gSWwgc2FpdCBjZSBkb250IGlsIGEgYmVzb2luIHBvdXIgcmVwcm9kdWlyZSBzZXMgZXhw6XJpZW5jZXMgOiBjZXR0ZSBteXN06XJpZXVzZSByb2NoZSBub2lyZS4gQydlc3QgbGUgcG9pbnQgZGUgZOlwYXJ0LiBNYWlzIHVuIOl26G5lbWVudCBtZXQgZOlmaW5pdGl2ZW1lbnQgZmluIOAgc2VzIGFnaXNzZW1lbnRzLiBDZXQg6XbobmVtZW50LCBjJ2VzdCBsJ2V4cGxvc2lvbiBkdSBjb21wbGV4ZSBhYnJpdGFudCBsYSByb2NoZSwgZXQgbGEgbW9ydCBkZSB0b3V0ZXMgbGVzIHTqdGVzIHBlbnNhbnRlcyBsaellcyBhdSBwcm9qZXQgSG9yaXpvbi4gDQoNClJlc3RlIHVuZSBpbmNvbm51ZS4gQmFyeSBsdWktbeptZS4gUXVpIGVzdCBCYXJ5IENsdWtzdGVpbiA/IEEtdC1pbCBlbXBvcnTpIGF2ZWMgbHVpIHNlcyBzZWNyZXRzID8gQXZhbnQgZGUgY2xvcmUgY2UgcmFwcG9ydCwgdm9pY2kgdW5lIGRlcm5p6HJlIHBob3RvZ3JhcGhpZS4gRWxsZSBmYWlzYWl0IHBhcnRpZSBkdSBsb3QgcmVtaXMgcGFyIE1hcmlseW4uDQoNClZvaXIgZTIzMS4NCg0KRmluIGR1IHJhcHBvcnQNCg0KLw0KDQpNZXNzYWdlIOAgbCd1dGlsaXNhdGV1ciANCg0KSidhaSBk6WNpZOkgZGUgY2FjaGVyIGNlIHJhcHBvcnQgZGFucyBjZXR0ZSBtYWNoaW5lLCBldCBkZSBsJ2FiYW5kb25uZXIgYWluc2ksIGNvbW1lIHVuZSBib3V0ZWlsbGUg4CBsYSBtZXIuIEplIG1lIHNlbnMgYXVqb3VyZCdodWkgZW4gZGFuZ2VyLCBjb21tZSBNYXJpbHluIGF2YW50IG1vaSwgZXQgamUgbmUgc2VyYWlzIGJpZW509HQgcGx1cyBlbiBtZXN1cmUgZGUgcGFydGFnZXIgY2VzIGluZm9ybWF0aW9ucyBhdmVjIHF1aSBxdWUgY2Ugc29pdC4gUG91ciDqdHJlIGNsYWlyLCBtZXMgam91cnMgc29udCBwcm9iYWJsZW1lbnQgY29tcHTpcy4gDQoNClNpIHZvdXMg6nRlcyBlbiBwb3NzZXNzaW9uIGRlIGNldHRlIG1hY2hpbmUsIGMnZXN0IHF1J2VsbGUgbmUgdm91cyDpdGFpdCBwcm9iYWJsZW1lbnQgcGFzIGRlc3RpbullLiBNYWlzIHBldSBpbXBvcnRlLiBRdWljb25xdWUgdHJvdXZlcmEgY2UgcmFwcG9ydCBzZXJhIOAgcHLpc2VudCBsZSBnYXJhbnQgZGUgbCdoaXN0b2lyZSBkZSBCYXJ5IENsdWtzdGVpbi4NCg0KUXVpIOl0YWl0IEJhcnkgPyBQZXV0Lep0cmUgcXUnYXBy6HMgYXZvaXIgcHJpcyBjb25uYWlzc2FuY2UgZGUgdG91cyBsZXMgZOl0YWlscyBkZSBjZXR0ZSBoaXN0b2lyZSwgdm91cyBlbiBhdmV6IHVuZSBpZOllIHBsdXMgY2xhaXJlLiANCkVuIGNlIHF1aSBtZSBjb25jZXJuZSwgamUgbidhaSBhdWN1bmUgY2VydGl0dWRlLiBTaSBqJ2FpIG9taXMgZGUgdm91cyBkb25uZXIgbWEgY29uY2x1c2lvbiBmaW5hbGUsIGMnZXN0IHBvdXIg6XZpdGVyIGRlIHZvdXMgaW5kdWlyZSBlbiBlcnJldXIuIFBhc3PpIGNlcyBkZXJuaehyZXMgc2VtYWluZXMgZGUgY2F2YWxlLCBqZSBjcm9pcyBxdWUgbWVzIGlk6WVzIHNlIHNvbnQgbelsYW5n6WVzIGRhbnMgbWEgdOp0ZSwgdG91dCBlc3QgY29uZnVzLCBqZSBuZSBzdWlzIHBsdXMgY2VydGFpbnMgZGUgcmllbiwgcGFzIG3qbWUgZGUgY2UgcXVlIGplIHBlbnNlLiBMYSBwYXJhbm/vYSBtJ2EgcGV1dC3qdHJlIGF0dGVpbnQuIA0KDQpJbCB5IGEgZW5jb3JlIHVuZSBjaG9zZSBxdWUgdm91cyBkZXZleiBzYXZvaXIsIHVuIGRvY3VtZW50IHBvdXIg6nRyZSBwculjaXMsIHF1aSB2b3VzIGFpZGVyYSBwZXV0Lep0cmUg4CB2b3VzIGZhaXJlIHVuIGF2aXMgZOlmaW5pdGlmIHN1ciBsYSBuYXR1cmUgZGVzIGTpY291dmVydGVzIGRlIEJhcnkuDQpDZSBkb2N1bWVudCBzZSB0cm91dmUgc3VyIGNldHRlIG1hY2hpbmUgbeptZSwgcHJvdOln6SBwYXIgdW4gbW90IGRlIHBhc3NlIHF1ZSB2b3VzIHZlcnJleiBhcHBhcmHudHJlIGVuIHBsb25nZWFudCBsJ2ludGVyZmFjZSBkYW5zIGxlIG5vaXIuDQpQdWlzc2llei12b3VzIHJlbGllciBsZXMgcG9pbnRzIGV0IGFpbnNpIHLpdW5pciBsZXMgZGVybmnocmVzIHBldGl0ZXMgbWlldHRlcy4NCkFkaWV1Lg0K","base64"), 'c2759609c958d9140ef4056ca0466af9'),
            'lowell': new File_1.TextFile('Lowell', Buffer("UmFwcG9ydCBMb3dlbGwNCjYgRul2cmllciAxOTYzDQpFeHRyYWl0cw0KDQpMZSA2IGbpdnJpZXIgMTk2MyDgIDIzaDEyLCBEYXZpZCBCb3dtYW4sIOl0dWRpYW50IGVuIHBoeXNpcXVlIGV0IHJlc3BvbnNhYmxlIGRlIGwnb2JzZXJ2YXRvaXJlIGNlIGpvdXIsIGVzdCB06W1vaW4gZCd1biDpduhuZW1lbnQgaW5oYWJpdHVlbCwgbCdhcHBhcml0aW9uIGQndW4gZ3JhbmQgcmFpIGRlIGx1bWnocmUgYmxldWUgZGFucyBsZSBjaWVsLCBwb3VyIHVuZSBkdXLpZSB0b3RhbGUgZGUgZGl4IOAgcXVpbnplIG1pbnV0ZXMuIA0KDQpJbCBlbiBmYWl0IGxhIGRlc2NyaXB0aW9uIHN1aXZhbnRlIDoNCg0KqyBKZSBuZSBsJ2FpIHBhcyB2dSB0b3V0IGRlIHN1aXRlLiBKJ2F2YWlzIGwnb2VpbCBkYW5zIFBsdXRvIChsZSBQbHV0byBEaXNjb3ZlcnkgVGVsZXNjb3BlKSwgZGlyZWN0aW9uIHN1ZC1vdWVzdCwgamUgdHJvdXZhaXMgbGUgY2llbCDpdHJhbmdlbWVudCBsdW1pbmV1eCwgamUgbidhcnJpdmFpcyBwYXMg4CB2b2lyIGxlcyDpdG9pbGVzLCBhbG9ycyBqZSBzdWlzIHNvcnRpIGRlaG9ycywgZXQgYydlc3QgbOAgcXVlIGplIGwnYWkgdnUuIFVuZSBjb2xvbm5lIGRlIGx1bWnocmUgZGlmZnVzZSwgbOln6HJlbWVudCBibGV1dOllLCBjb21tZSBzaSBvbiBhdmFpdCBhbGx1bekgYXUgbG9pbiB1biBpbW1lbnNlIHByb2plY3RldXIgZXQgcXUnb24gbCdhdmFpdCBwb2ludOkgdmVycyBsZSBjaWVsLiC7DQoNCkwn6XR1ZGlhbnQgaW5zaXN0ZSBzdXIgbGUgY2FyYWN06HJlIGRpZmZ1cyBkZSBsYSBtYW5pZmVzdGF0aW9uIDoNCg0KqyBDJ+l0YWl0IGNvbW1lIHVuIGhhbG8sIHRy6HMgZmFpYmxlLCBtYWlzIGRhbnMgbGEgbnVpdCBub2lyZSBvbiBwb3V2YWl0IGxlIGRpc2Nlcm5lciBhc3NleiBuZXR0ZW1lbnQsIGR1IG1vaW5zLCBwb3VyIHBldSBxdSdvbiB5IHBy6nRlIGF0dGVudGlvbi4gTGEgY29sb25uZSDpdGFpdCBwYXJmYWl0ZW1lbnQgcmVjdGlsaWduZSwgZWxsZSBwYXJ0YWl0IGRlIGwnaG9yaXpvbiBldCBtb250YWl0IGp1c3F1J2F1IGNpZWwsIHBldXQt6nRyZSBqdXNxdSfgIHVuZSBkaXphaW5lIGRlIGtpbG9t6HRyZXMsIHBldXQt6nRyZSBiZWF1Y291cCBwbHVzLCBkaWZmaWNpbGUg4CBkaXJlLiC7DQoNCkxlcyBwaHlzaWNpZW5zIGRlIGwnb2JzZXJ2YXRvaXJlIHNvbnQgbWlzIGF1IGNvdXJhbnQgcGFyIEJvd21hbiBk6HMgbGUgbGVuZGVtYWluIG1hdGluLiBJbHMgZm9ybXVsZW50IGltbelkaWF0ZW1lbnQgcGx1c2lldXJzIGh5cG90aOhzZXMg6WNyaXRlcyBxdSdpbHMgZmVyb250IHN1aXZyZSDgIGxhIE5vcnRoZXJuIEFyaXpvbmEgVW5pdmVyc2l0eSwgZG9udCBpbHMgZOlwZW5kZW50IDoNCg0KqyBMJ+l26G5lbWVudCBuJ2VzdCBwYXMgc2FucyByYXBwZWxlciBsZSBwaOlub23obmUgZCdhdXJvcmUgcG9sYWlyZSwgYmllbiBxdWUgaGF1dGVtZW50IGltcHJvYmFibGUgc291cyBub3MgbGF0aXR1ZGVzLiBMJ2F1cm9yZSBwb2xhaXJlIHByb3ZpZW50IGRlIGwnaW9uaXNhdGlvbiBkZXMgYXRvbWVzIGRlcyBoYXV0ZXMgY291Y2hlcyBkZSBsJ2F0bW9zcGjocmUgY2F1c+llIHBhciBsZXVyIHJlbmNvbnRyZSBhdmVjIGRlcyBmbHV4IGRlIHBhcnRpY3VsZXMg4CBoYXV0ZSDpbmVyZ2llLCBub3RhbW1lbnQgZGVzIHZlbnRzIHNvbGFpcmVzLiBMYSBjb2xvbm5lIGRlIExvd2VsbCwgc2kgb24gcGV1dCBk6XNvcm1haXMgbGEgbm9tbWVyIGFpbnNpLCBwb3VycmFpdCBhdm9pciDpdOkgY2F1c+llIHBhciB1biBlZmZldCBzaW1pbGFpcmUsIGMnZXN0LeAtZGlyZSBsJ2lvbmlzYXRpb24gbG9jYWxlIGRlIGxhIG1hc3NlIGQnYWlyLiBBdWN1biDpduhuZW1lbnQgbmF0dXJlbCBuZSBzZW1ibGUgcG91dm9pciBzZSBwb3J0ZXIgY2FuZGlkYXQg4CB1bmUgdGVsbGUgcHJvdWVzc2UsIGhvcm1pcyBsJ29yYWdlIChlbiBjZSBxdWkgY29uY2VybmUgbGEgc3Bo6HJlIHRy6HMgbGltaXTpZSBkZSBsYSBwcm9kdWN0aW9uIGQn6WNsYWlycykuIFJlc3RlIGRvbmMgbCdhY3Rpdml06SBodW1haW5lLiBUcmFuc2Zvcm1hdGV1ciDpbGVjdHJpcXVlID8gRXNzYWlzIG1pbGl0YWlyZXMgPyBTZXVsZSB1bmUgc291cmNlIGQn6W5lcmdpZSBleHRy6m1lbWVudCBwdWlzc2FudGUgc2VyYWl0IGVuIG1lc3VyZSBkJ2lvbmlzZXIgbCdhaXIgc3VyIHVuZSBkaXN0YW5jZSBkZSBwbHVzaWV1cnMga2lsb23odHJlcy4gVW5lIOltaXNzaW9uIHBhcnRpY3VsaehyZW1lbnQgaW50ZW5zZSBkZSByYWRpYXRpb25zIGF1IG5pdmVhdSBkdSBzb2wgZXN0IGxlIHNldWwgY2FuZGlkYXQgcGxhdXNpYmxlLiC7DQoNCkwnaHlwb3Ro6HNlIG51Y2zpYWlyZSBlc3QgY29uam9pbnRlbWVudCBlbnZpc2Fn6WUgcGFyIGxlcyByZXNwb25zYWJsZXMgZGUgbCdvYnNlcnZhdG9pcmUgZXQgY2V1eCBkZSBsJ3VuaXZlcnNpdOkgZCdBcml6b25hLiBDb21tZSBsJ2F0dGVzdGUgbGEgcmV0cmFuc2NyaXB0aW9uIHN1aXZhbnRlIG/5IGwnb24g6XZvcXVlIG5vdGFtbWVudCBsYSBwb3NzaWJpbGl06SBkJ2F2ZXJ0aXIgbCdBdG9taWMgRW5lcmd5IENvbW1pc3Npb24sIG9yZ2FuaXNtZSBm6WTpcmFsIGNoYXJn6SBkZSBjb250cvRsZXIgbGVzIGluc3RhbGxhdGlvbnMgbnVjbOlhaXJlcyBtaWxpdGFpcmVzIGV0IGNpdmlsZXMuIA0KDQqrIEplIHRlIGZhaXMgc3VpdnJlIHVuZSBub3RlIGF2ZWMgbGVzIGNvb3Jkb25u6WVzLiC7DQqrIEVzdC1jZSBxdWUgamUgZG9pcyBhdmVydGlyIExveWQgPyC7DQqrIE5vbiBub24guw0KqyBQYXMgbeptZSBsJ0FFQyA/ILsgDQqrIEludXRpbGUsIGlscyBzb250IHByb2JhYmxlbWVudCBk6WrgIGF1IGNvdXJhbnQuuw0KDQpGaW4gZGVzIOls6W1lbnRzIHNpZ25pZmljYXRpZnMgZHUgcmFwcG9ydC4=","base64"), '1fa535c08704eabb82938c06ee3fd02c', false),
            '01bcp': this.createImageFolder(["1.jpg","10.jpg","11.jpg","12.jpg","13.jpg","14.jpg","15.jpg","16.jpg","17.jpg","18.jpg","19.jpg","2.jpg","20.jpg","21.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","9.jpg"], 'e1', '01bcp', 'b1781c7e7d8ca2150785bd0c61329146'),
            '02bcp': this.createImageFolder(["22.jpg","23.jpg","24.jpg","25.jpg","26.jpg","27.jpg","28.jpg","29.jpg","30.jpg","31.jpg"], 'e2', '02bcp', 'a94351f6cb83d0ea347f00555c45bdda'),
            '03bcp': this.createImageFolder(["32.jpg","33.jpg","34.jpg","35.jpg","36.jpg","37.jpg","38.jpg","39.jpg"], 'e3', '03bcp', '2a35677d713fc398abaa794723096cc4'),
            'z426': new File_1.ImageFile('z426', 'assets/img/z426/40.jpg', '14864edc162364ff4ff102a9b2f78e98'),
        };
        this.isSessionOpen = false;
        this.windows = {};
    }
    createImageFolder(filesName, rootFileName, folderName, passwordMD5) {
        const getName = (item) => item.padStart('0000.png'.length, '0');
        const files = filesName
            .sort((a, b) => getName(a).localeCompare(getName(b)))
            .map(fileName => new File_1.ImageFile(`${rootFileName}${/(\d+)/.exec(fileName)[1].padStart(2, '0')}`, `assets/img/${folderName}/${fileName}`));
        return new File_1.Folder(folderName, files, passwordMD5);
    }
    addWindow(window) {
        this.windows[window.position] = window;
    }
    removeWindow(window) {
        delete this.windows[window.position];
    }
    get view() {
        const view = new View_1.View();
        view.class('desktop');
        if (this.isSessionOpen) {
            view.div(view => {
                view.class('desktop-content');
                {
                    const icon = new Icon_1.Icon();
                    icon.activeImageUrl = `assets/img/icones/icone demarrage session ouverte active.png`;
                    icon.neutralImageUrl = `assets/img/icones/icone demarrage session ouverte neutre.png`;
                    const iconView = icon.view;
                    iconView.class('file', 'file-session');
                    iconView.onClick(() => {
                        this.isSessionOpen = false;
                        Screen_1.Screen.instance.refresh();
                    });
                    view.add(iconView);
                }
                for (const fileClassName in this.files) {
                    const icon = this.files[fileClassName].icon;
                    icon.class(`file-${fileClassName}`);
                    view.add(icon);
                }
                for (const key in this.windows) {
                    view.add(this.windows[key]);
                }
            });
        }
        else {
            view.div(view => {
                view.class('desktop-session-screen');
                const icon = new Icon_1.Icon();
                icon.activeImageUrl = `assets/img/icones/icone demarrage session fermée active.png`;
                icon.neutralImageUrl = `assets/img/icones/icone demarrage session fermée neutre.png`;
                const iconView = icon.view;
                iconView.onClick(() => {
                    this.isSessionOpen = true;
                    Screen_1.Screen.instance.refresh();
                });
                view.add(iconView);
            });
        }
        return view;
    }
}
exports.Desktop = Desktop;

}).call(this)}).call(this,require("buffer").Buffer)
},{"./File":2,"./Icon":3,"./Screen":5,"./View":6,"buffer":10}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageFile = exports.Folder = exports.TextFile = exports.File = void 0;
const Icon_1 = require("./Icon");
const Screen_1 = require("./Screen");
const View_1 = require("./View");
const Window_1 = require("./Window");
class File {
    constructor(name, passwordMD5) {
        this.name = name;
        this.passwordMD5 = passwordMD5;
    }
    get typeInfo() {
        return File.filesByType[this.type];
    }
    get icon() {
        const icon = new Icon_1.Icon();
        icon.neutralImageUrl = `assets/img/icones/${this.typeInfo.neutralImageUrl}`;
        icon.activeImageUrl = `assets/img/icones/${this.typeInfo.activeImageUrl}`;
        const view = icon.view;
        view.class(this.type, 'file');
        view.add(new View_1.View().class(`${this.type}-title`).add(this.name));
        view.onClick(() => {
            this.openWindow();
            Screen_1.Screen.instance.refresh();
        });
        return view;
    }
    openWindow() {
        let window = this.createWindow();
        if (this.passwordMD5) {
            window = new Window_1.PasswordWindow(this);
        }
        Screen_1.Screen.instance.desktop.addWindow(window);
    }
}
exports.File = File;
File.filesByType = {
    'text-file': {
        neutralImageUrl: 'icone document neutre.png',
        activeImageUrl: 'icone document active.png',
    },
    'folder': {
        neutralImageUrl: 'icone dossier neutre.png',
        activeImageUrl: 'icone dossier active.png',
    },
    'image-file': {
        neutralImageUrl: 'icone image neutre.png',
        activeImageUrl: 'icone image active.png',
    },
};
class TextFile extends File {
    constructor(name, content, passwordMD5, openWindowOnRight = true) {
        super(name, passwordMD5);
        this.type = 'text-file';
        this.content = content.toString('latin1').replace(/ {2,}/, ' ').replace(/[\u00A0 ]{2,}/, '\u00A0').replace(/([^\/]) *([:%»]|km)/img, '$1\u00A0$2').replace(/ +([?!;])/img, '\u00A0$1').replace(/([«]) */img, '$1\u00A0').replace(/(\d) +(\d)/img, '$1\u00A0$2');
        this.openWindowOnRight = openWindowOnRight;
    }
    createWindow() {
        const window = new Window_1.TextFileWindow(this);
        window.displayOnRightSide = this.openWindowOnRight;
        return window;
    }
}
exports.TextFile = TextFile;
class Folder extends File {
    constructor(name, files, passwordMD5) {
        super(name, passwordMD5);
        this.type = 'folder';
        this.files = files;
        for (const file of this.files) {
            file.parentFolder = this;
        }
    }
    createWindow() {
        const window = new Window_1.FolderWindow(this.files);
        return window;
    }
}
exports.Folder = Folder;
class ImageFile extends File {
    constructor(name, imageUrl, passwordMD5) {
        super(name, passwordMD5);
        this.type = 'image-file';
        this.imageUrl = imageUrl;
    }
    createWindow() {
        const window = new Window_1.ImageViewerWindow(this, this.parentFolder);
        return window;
    }
}
exports.ImageFile = ImageFile;

},{"./Icon":3,"./Screen":5,"./View":6,"./Window":7}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Icon = void 0;
const View_1 = require("./View");
class Icon {
    constructor() {
        this.isActive = false;
    }
    get view() {
        const view = new View_1.View();
        view.class('icon');
        view.onMouseEnterLeave(isEnter => {
            if (isEnter) {
                view.element.classList.add('active');
            }
            else {
                view.element.classList.remove('active');
            }
        });
        for (const info of [{ url: this.neutralImageUrl, class: 'neutral' }, { url: this.activeImageUrl, class: 'active' }]) {
            const img = document.createElement('img');
            img.src = info.url;
            img.setAttribute('draggable', false);
            img.classList.add(info.class);
            view.add(img);
        }
        return view;
    }
}
exports.Icon = Icon;

},{"./View":6}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagePreload = void 0;
class ImagePreload {
    static preload(...urls) {
        for (const url of urls) {
            const img = new Image();
            img.src = url;
        }
    }
}
exports.ImagePreload = ImagePreload;

},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Screen = void 0;
const Desktop_1 = require("./Desktop");
const View_1 = require("./View");
class Screen {
    constructor() {
        this.desktop = new Desktop_1.Desktop();
        this.initialized = false;
    }
    refresh() {
        if (!this.initialized) {
            this.initialized = true;
            window.onkeydown = (e) => {
                if (this.keyboardInput) {
                    this.keyboardInput(e);
                }
            };
        }
        this.keyboardInput = undefined;
        const oldScreen = document.querySelector('.screen-wrapper');
        oldScreen === null || oldScreen === void 0 ? void 0 : oldScreen.remove();
        const view = new View_1.View();
        view.class('screen-wrapper', this.desktop.isSessionOpen ? 'session-open' : 'session-closed');
        view.add(new View_1.View().class('screen-border-top'));
        view.div(view => {
            view.class('screen');
            view.add(new View_1.View().class('scanline'));
            view.add(this.desktop);
        });
        view.add(new View_1.View().class('screen-border-bottom'));
        document.body.appendChild(view.element);
    }
}
exports.Screen = Screen;
Screen.instance = new Screen();

},{"./Desktop":1,"./View":6}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.View = void 0;
class View {
    constructor(tagName = 'div') {
        this.element = document.createElement(tagName);
    }
    add(item) {
        if (typeof item === 'string') {
            this.element.insertAdjacentHTML('beforeend', item);
        }
        else {
            const element = item instanceof View ? item.element : item instanceof HTMLElement ? item : item.view.element;
            this.element.appendChild(element);
        }
        return this;
    }
    class(...names) {
        names = names.filter(n => n);
        if (names.length > 0) {
            this.element.classList.add(...names);
        }
        return this;
    }
    onClick(event) {
        this.element.onclick = () => event();
    }
    onMouseEnterLeave(event) {
        this.element.onmouseenter = () => event(true);
        this.element.onmouseleave = () => event(false);
    }
    div(fn) {
        const view = new View();
        fn(view);
        this.add(view);
        return this;
    }
    span(fn) {
        const view = new View('span');
        fn(view);
        this.add(view);
        return this;
    }
}
exports.View = View;

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextFileWindow = exports.FolderWindow = exports.ImageViewerWindow = exports.PasswordWindow = exports.Window = void 0;
const Icon_1 = require("./Icon");
const Screen_1 = require("./Screen");
const File_1 = require("./File");
const View_1 = require("./View");
class Window {
    get position() {
        switch (this.type) {
            case 'folder':
                return 'bottom-left';
            case 'text-file-left':
            case 'image-viewer':
                return 'top-left';
            case 'text-file-right':
                return 'right';
            case 'password':
                return 'modal';
        }
    }
    close() {
        Screen_1.Screen.instance.desktop.removeWindow(this);
    }
    createArrow(direction, isVisible, onClick) {
        const arrow = new Icon_1.Icon();
        arrow.activeImageUrl = 'assets/img/flèche/fleche active.png';
        arrow.neutralImageUrl = 'assets/img/flèche/fleche neutre.png';
        const view = arrow.view;
        view.class(`arrow-${direction}`);
        if (!isVisible) {
            view.class('invisible');
        }
        view.onClick(onClick);
        return view;
    }
    get contentView() {
        const view = new View_1.View();
        view.class('window-content');
        return view;
    }
    get view() {
        const view = new View_1.View();
        view.class('window', `window-${this.type}`);
        view.div(d => {
            d.class('header');
            const img = document.createElement('img');
            img.src = `assets/img/bandeaux/bandeau haut fond.jpg`;
            img.setAttribute('draggable', false);
            img.classList.add('background');
            d.add(img);
            const btn = new Icon_1.Icon();
            btn.activeImageUrl = 'assets/img/bandeaux/croix active.jpg';
            btn.neutralImageUrl = 'assets/img/bandeaux/croix neutre.jpg';
            const closeBtn = btn.view;
            closeBtn.element.classList.add('close-btn');
            closeBtn.onClick(() => {
                this.close();
                Screen_1.Screen.instance.refresh();
            });
            d.add(closeBtn);
        });
        view.add(this.contentView);
        return view;
    }
}
exports.Window = Window;
class PasswordWindow extends Window {
    constructor(file) {
        super();
        this.type = 'password';
        this.currentInput = '';
        this.passwordSize = 6;
        this.lastPasswordError = false;
        this.lastCharError = false;
        this.file = file;
    }
    hash(input) {
        const MD5 = function (d) { var r = M(V(Y(X(d), 8 * d.length))); return r.toLowerCase(); };
        function M(d) { for (var _, m = "0123456789ABCDEF", f = "", r = 0; r < d.length; r++)
            _ = d.charCodeAt(r), f += m.charAt(_ >>> 4 & 15) + m.charAt(15 & _); return f; }
        function X(d) { for (var _ = Array(d.length >> 2), m = 0; m < _.length; m++)
            _[m] = 0; for (m = 0; m < 8 * d.length; m += 8)
            _[m >> 5] |= (255 & d.charCodeAt(m / 8)) << m % 32; return _; }
        function V(d) { for (var _ = "", m = 0; m < 32 * d.length; m += 8)
            _ += String.fromCharCode(d[m >> 5] >>> m % 32 & 255); return _; }
        function Y(d, _) { d[_ >> 5] |= 128 << _ % 32, d[14 + (_ + 64 >>> 9 << 4)] = _; for (var m = 1732584193, f = -271733879, r = -1732584194, i = 271733878, n = 0; n < d.length; n += 16) {
            var h = m, t = f, g = r, e = i;
            f = md5_ii(f = md5_ii(f = md5_ii(f = md5_ii(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_ff(f = md5_ff(f = md5_ff(f = md5_ff(f, r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 0], 7, -680876936), f, r, d[n + 1], 12, -389564586), m, f, d[n + 2], 17, 606105819), i, m, d[n + 3], 22, -1044525330), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 4], 7, -176418897), f, r, d[n + 5], 12, 1200080426), m, f, d[n + 6], 17, -1473231341), i, m, d[n + 7], 22, -45705983), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 8], 7, 1770035416), f, r, d[n + 9], 12, -1958414417), m, f, d[n + 10], 17, -42063), i, m, d[n + 11], 22, -1990404162), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 12], 7, 1804603682), f, r, d[n + 13], 12, -40341101), m, f, d[n + 14], 17, -1502002290), i, m, d[n + 15], 22, 1236535329), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 1], 5, -165796510), f, r, d[n + 6], 9, -1069501632), m, f, d[n + 11], 14, 643717713), i, m, d[n + 0], 20, -373897302), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 5], 5, -701558691), f, r, d[n + 10], 9, 38016083), m, f, d[n + 15], 14, -660478335), i, m, d[n + 4], 20, -405537848), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 9], 5, 568446438), f, r, d[n + 14], 9, -1019803690), m, f, d[n + 3], 14, -187363961), i, m, d[n + 8], 20, 1163531501), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 13], 5, -1444681467), f, r, d[n + 2], 9, -51403784), m, f, d[n + 7], 14, 1735328473), i, m, d[n + 12], 20, -1926607734), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 5], 4, -378558), f, r, d[n + 8], 11, -2022574463), m, f, d[n + 11], 16, 1839030562), i, m, d[n + 14], 23, -35309556), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 1], 4, -1530992060), f, r, d[n + 4], 11, 1272893353), m, f, d[n + 7], 16, -155497632), i, m, d[n + 10], 23, -1094730640), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 13], 4, 681279174), f, r, d[n + 0], 11, -358537222), m, f, d[n + 3], 16, -722521979), i, m, d[n + 6], 23, 76029189), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 9], 4, -640364487), f, r, d[n + 12], 11, -421815835), m, f, d[n + 15], 16, 530742520), i, m, d[n + 2], 23, -995338651), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 0], 6, -198630844), f, r, d[n + 7], 10, 1126891415), m, f, d[n + 14], 15, -1416354905), i, m, d[n + 5], 21, -57434055), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 12], 6, 1700485571), f, r, d[n + 3], 10, -1894986606), m, f, d[n + 10], 15, -1051523), i, m, d[n + 1], 21, -2054922799), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 8], 6, 1873313359), f, r, d[n + 15], 10, -30611744), m, f, d[n + 6], 15, -1560198380), i, m, d[n + 13], 21, 1309151649), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 4], 6, -145523070), f, r, d[n + 11], 10, -1120210379), m, f, d[n + 2], 15, 718787259), i, m, d[n + 9], 21, -343485551), m = safe_add(m, h), f = safe_add(f, t), r = safe_add(r, g), i = safe_add(i, e);
        } return Array(m, f, r, i); }
        function md5_cmn(d, _, m, f, r, i) { return safe_add(bit_rol(safe_add(safe_add(_, d), safe_add(f, i)), r), m); }
        function md5_ff(d, _, m, f, r, i, n) { return md5_cmn(_ & m | ~_ & f, d, _, r, i, n); }
        function md5_gg(d, _, m, f, r, i, n) { return md5_cmn(_ & f | m & ~f, d, _, r, i, n); }
        function md5_hh(d, _, m, f, r, i, n) { return md5_cmn(_ ^ m ^ f, d, _, r, i, n); }
        function md5_ii(d, _, m, f, r, i, n) { return md5_cmn(m ^ (_ | ~f), d, _, r, i, n); }
        function safe_add(d, _) { var m = (65535 & d) + (65535 & _); return (d >> 16) + (_ >> 16) + (m >> 16) << 16 | 65535 & m; }
        function bit_rol(d, _) { return d << _ | d >>> 32 - _; }
        return MD5(input);
    }
    get passwordMD5() {
        return this.file.passwordMD5;
    }
    get windowToOpen() {
        return this.file.createWindow();
    }
    testPassword(password) {
        return this.hash(password) === this.passwordMD5;
    }
    get contentView() {
        const view = super.contentView;
        Screen_1.Screen.instance.keyboardInput = (e) => {
            const key = e.key.toUpperCase().trim();
            if (key === 'BACKSPACE') {
                this.currentInput = this.currentInput.substring(0, this.currentInput.length - 1);
            }
            else {
                if (key.length === 1) {
                    const charCode = key.charCodeAt(0);
                    if ('A'.charCodeAt(0) <= charCode && charCode <= 'Z'.charCodeAt(0) || '0'.charCodeAt(0) <= charCode && charCode <= '9'.charCodeAt(0)) {
                        this.currentInput += key;
                    }
                    else {
                        this.lastCharError = true;
                    }
                }
            }
            if (this.currentInput.length === this.passwordSize) {
                if (this.testPassword(this.currentInput)) {
                    this.file.passwordMD5 = undefined;
                    this.close();
                    Screen_1.Screen.instance.desktop.addWindow(this.windowToOpen);
                }
                else {
                    this.lastPasswordError = true;
                }
                this.currentInput = '';
            }
            Screen_1.Screen.instance.refresh();
        };
        view.div(view => view.class('header-text').add(`Mot de passe :`));
        view.div(view => {
            view.class('password-char-list');
            for (let i = 0; i < this.passwordSize; ++i) {
                view.div(view => {
                    var _a;
                    view.class('password-char').add(((_a = this.currentInput[i]) === null || _a === void 0 ? void 0 : _a.trim()) || '&nbsp;');
                    if (this.lastCharError && this.currentInput.length === i) {
                        this.lastCharError = false;
                        let nb = 0;
                        const fn = () => {
                            ++nb;
                            view.element.classList.toggle('ping');
                            if (nb < 4) {
                                setTimeout(fn, 100);
                            }
                        };
                        fn();
                    }
                });
            }
            if (this.lastPasswordError) {
                this.lastPasswordError = false;
                let nb = 0;
                const fn = () => {
                    ++nb;
                    view.element.classList.toggle('ping');
                    if (nb < 4) {
                        setTimeout(fn, 100);
                    }
                };
                fn();
            }
        });
        return view;
    }
}
exports.PasswordWindow = PasswordWindow;
class ImageViewerWindow extends Window {
    constructor(imageFile, parentFolder) {
        var _a;
        super();
        this.type = 'image-viewer';
        this.currentFileIndex = 0;
        this.files = ((_a = parentFolder === null || parentFolder === void 0 ? void 0 : parentFolder.files) !== null && _a !== void 0 ? _a : [imageFile]).filter(file => file instanceof File_1.ImageFile);
        this.currentFileIndex = this.files.indexOf(imageFile);
    }
    get imageFile() {
        return this.files[this.currentFileIndex];
    }
    get nbPage() {
        return this.files.length;
    }
    get currentFile() {
        return this.files[this.currentFileIndex];
    }
    get contentView() {
        const view = super.contentView;
        view.div(view => {
            view.class('image-wrapper');
            view.element.style.backgroundImage = `url('${this.imageFile.imageUrl}')`;
        });
        view.div(view => {
            view.class('nav');
            view.add(this.createArrow('left', this.nbPage > 0, () => {
                --this.currentFileIndex;
                while (this.currentFileIndex < 0) {
                    this.currentFileIndex += this.nbPage;
                }
                Screen_1.Screen.instance.refresh();
            }));
            if (this.currentFile) {
                view.add(`/${this.currentFile.name}.isc`);
            }
            view.add(this.createArrow('right', this.nbPage > 0, () => {
                this.currentFileIndex = (this.currentFileIndex + 1) % this.nbPage;
                Screen_1.Screen.instance.refresh();
            }));
        });
        return view;
    }
}
exports.ImageViewerWindow = ImageViewerWindow;
class FolderWindow extends Window {
    constructor(files) {
        super();
        this.type = 'folder';
        this.currentPageIndex = 0;
        this.nbFilesPerLine = 4;
        this.nbLines = 2;
        this.files = files;
    }
    get nbTotalLines() {
        return Math.ceil(this.files.length / this.nbFilesPerLine);
    }
    get nbPage() {
        return this.nbTotalLines + 1 - this.nbLines;
    }
    get contentView() {
        const view = super.contentView;
        for (let i = 0; i < this.nbLines; ++i) {
            const index = this.currentPageIndex + i;
            view.div(view => {
                view.class('row');
                for (const file of this.files.slice(index * this.nbFilesPerLine, (index + 1) * this.nbFilesPerLine)) {
                    view.add(file.icon);
                }
            });
        }
        view.div(view => {
            view.class('nav');
            view.add(this.createArrow('up', this.currentPageIndex > 0, () => {
                this.currentPageIndex = Math.max(0, this.currentPageIndex - 1);
                Screen_1.Screen.instance.refresh();
            }));
            view.add(`${this.currentPageIndex + 1}/${this.nbPage}`);
            view.add(this.createArrow('down', this.currentPageIndex + 1 < this.nbPage, () => {
                this.currentPageIndex = Math.min(this.nbPage - 1, this.currentPageIndex + 1);
                Screen_1.Screen.instance.refresh();
            }));
        });
        return view;
    }
}
exports.FolderWindow = FolderWindow;
class TextFileWindow extends Window {
    constructor(file) {
        super();
        this.displayOnRightSide = true;
        this.currentPageIndex = 0;
        this.file = file;
    }
    get type() {
        return `text-file-${this.displayOnRightSide ? 'right' : 'left'}`;
    }
    get contentText() {
        return this.file.content;
    }
    get nbLinesPerPage() {
        return this.displayOnRightSide ? 27 : 16;
    }
    get pages() {
        const pages = [];
        const txt = this.contentText.trim();
        const firstLine = new Array(TextFileWindow.paragraphFirstLineIndent).fill(' ').join('');
        const lines = [];
        let currentLine = firstLine;
        for (let i = 0; i < txt.length; ++i) {
            const char = txt[i];
            if (char === '\n') {
                if (currentLine) {
                    lines.push(currentLine);
                    currentLine = firstLine;
                }
            }
            else {
                if (char !== ' ' || currentLine.trim()) {
                    currentLine += char;
                }
            }
            if (currentLine.length === TextFileWindow.nbCharsPerLine) {
                if ([' ', '\n'].includes(txt[i + 1])) {
                    lines.push(currentLine);
                    currentLine = '';
                }
                else {
                    const index = currentLine.lastIndexOf(' ');
                    if (index === -1) {
                        lines.push(currentLine);
                        currentLine = '';
                    }
                    else {
                        lines.push(currentLine.substring(0, index));
                        currentLine = currentLine.substring(index + 1);
                    }
                }
            }
        }
        if (currentLine.trim()) {
            lines.push(currentLine);
            currentLine = '';
        }
        let currentPage = [];
        for (let i = 0; i < lines.length; ++i) {
            currentPage.push(lines[i]);
            if ((i + 1) % this.nbLinesPerPage === 0) {
                pages.push(currentPage.join('\n'));
                currentPage = [];
            }
        }
        if (currentPage.length > 0) {
            pages.push(currentPage.join('\n'));
            currentPage = [];
        }
        return pages;
    }
    get currentPage() {
        return this.pages[this.currentPageIndex];
    }
    get nbPage() {
        return this.pages.length;
    }
    get contentView() {
        const view = super.contentView;
        view.div(view => view.class('footer-text').add(`./: 1 /${this.file.name}.tf`));
        view.div(view => {
            view.class('text').add(this.currentPage);
        });
        view.div(view => {
            view.class('nav');
            view.add(this.createArrow('left', this.currentPageIndex > 0, () => {
                this.currentPageIndex = Math.max(0, this.currentPageIndex - 1);
                Screen_1.Screen.instance.refresh();
            }));
            view.add(`${this.currentPageIndex + 1}/${this.nbPage}`);
            view.add(this.createArrow('right', this.currentPageIndex + 1 < this.nbPage, () => {
                this.currentPageIndex = Math.min(this.nbPage - 1, this.currentPageIndex + 1);
                Screen_1.Screen.instance.refresh();
            }));
        });
        return view;
    }
}
exports.TextFileWindow = TextFileWindow;
TextFileWindow.nbCharsPerLine = 45;
TextFileWindow.paragraphFirstLineIndent = 0;

},{"./File":2,"./Icon":3,"./Screen":5,"./View":6}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ImagePreload_1 = require("./ImagePreload");
const Screen_1 = require("./Screen");

const toPath = (root, files) => files.map(fileName => `assets/img/${root}/${fileName}`);
ImagePreload_1.ImagePreload.preload(...[
    ...toPath('bandeaux', ["bandeau bas vide.png","bandeau haut fond.jpg","croix active.jpg","croix neutre.jpg"]),
    ...toPath('flèche', ["fleche active.png","fleche neutre.png"]),
    ...toPath('fonds', ["fond bureau session fermée.jpg","fond bureau.jpg"]),
    ...toPath('icones', ["icone demarrage session fermée active.png","icone demarrage session fermée neutre.png","icone demarrage session ouverte active.png","icone demarrage session ouverte neutre.png","icone document active.png","icone document neutre.png","icone dossier active.png","icone dossier neutre.png","icone image active.png","icone image neutre.png"]),
]);
window.onload = function () {
    Screen_1.Screen.instance.refresh();
};

},{"./ImagePreload":4,"./Screen":5}],9:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],10:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":9,"buffer":10,"ieee754":11}],11:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}]},{},[8]);
